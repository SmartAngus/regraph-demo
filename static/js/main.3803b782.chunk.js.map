{"version":3,"sources":["editor/defines.tsx","editor/components/NodePanel.tsx","editor/utils/FullsreenUtils.ts","editor/components/Toolbar.tsx","editor/components/Edge.tsx","editor/utils/types.ts","editor/components/Node.tsx","editor/hooks/useResize.tsx","editor/utils/calc.ts","editor/utils/useDragSelect.ts","editor/components/DragSelector.tsx","editor/ContextMenu.tsx","editor/hooks/useClickAway.tsx","editor/EditorNode.tsx","editor/EditorEdges.tsx","editor/utils/find.ts","utils.tsx","editor/CanvasContent.tsx","editor/hooks/useEditorStore.tsx","editor/hooks/useLocalStorage.tsx","editor/hooks/useKeyPress.tsx","editor/index.tsx","editor/utils/layout.ts","index.tsx","App.tsx"],"names":["ComponentType","OutputType","ComponentMap","common","ComponentKey","COMMON_COMPONENT","type","key","rect","name","width","height","icon","style","border","disabled","rectRadius","borderRadius","circle","xmlns","version","cx","cy","r","stroke","strokeWidth","fill","COMPONENT_CATEGORY","OperateType","useState","React","Panel","Collapse","NodePanel","props","componnetList","Object","values","onDrag","visible","collapseKey","setCollapseKey","boxClass","classNames","handleDrag","item","className","activeKey","onChange","items","bordered","accordion","map","total","length","header","child","boxItemClass","draggable","bind","isFull","doc","document","fullscreenElement","webkitFullscreenElement","Toolbar","ref","screenScale","changeScreenScale","handleResizeTo","onShear","onCopy","onPaste","onDelete","onDragSelect","onSave","scale","String","Math","round","isSave","includes","isFullScreen","isZoom","isShear","isCopy","isPaste","isDelete","isDragSelect","fullscreenStatus","handleResize","isLager","value","handleFullScreen","element","exitFullscreen","webkitExitFullscreen","current","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullscreen","fullScreenClassName","fullscreen","onClick","renderButtons","Edge","id","onContextMenu","object","lineAppendWidth","path","startArrow","endArrow","markerStart","endStart","markerWidth","markerHeight","refX","refY","orient","markerUnits","d","_","markerEnd","useRef","useEffect","Node","x","y","children","currTrans","isSelected","onResize","showSelector","setShowSelector","containerRef","isResize","nodeWidth","setNodeWidth","nodeHeight","setNodeHeight","nodeLeft","setNodeLeft","nodeTop","setNodeTop","resizers","querySelectorAll","querySelector","originWidth","originHeight","originMouseX","originMouseY","i","currentResizer","addEventListener","e","preventDefault","parseFloat","getComputedStyle","getPropertyValue","replace","getBoundingClientRect","left","top","pageX","pageY","window","resize","stopResize","newWidth","newHeight","classList","contains","removeEventListener","useResize","resizeWidth","resizeHeight","resizeX","resizeY","NODE_SELECTOR","position","right","renderResize","data-type","renderNodeSelector","data-position","onMouseEnter","onMouseLeave","event","stopPropagation","container","domNode","offsetTop","offsetLeft","targetDomNode","body","offsetParent","getOffset","screenX","clientX","screenY","clientY","newX","k","newY","quadratic","sourcePoint","targetPoint","ratio","detectZoom","sourceX","targetX","centerX","centerY","tolerance","sub","max","abs","join","outerWidth","innerWidth","screen","ua","navigator","userAgent","toLowerCase","undefined","devicePixelRatio","test","indexOf","deviceXDPI","logicalXDPI","calcLinkPosition","node","useCallback","initSelectorProps","direction","useMemo","DragSeletor","overlayColor","selectorStyle","onClose","getPopupContainer","dragSelectContainerRef","shape","shapeProps","setShapeProps","pathData","setPathData","mousdownX","mousdownY","handleMouseMove","layerX","layerY","diffX","newShapeProps","handlePathData","handleMouseUp","handleMouseDown","drag","useDragSelect","handleClick","dom","classes","popupContainer","Number","marginLeft","match","marginRight","getWidth","marginTop","marginBottom","getHeight","background","ContextMenu","display","useClickAway","onClickAway","eventName","handler","el","target","EditorNode","currentNode","onSelect","hasError","isDragged","interactive","nodeRef","menuShow","setMenuShow","menuPos","setMenuPos","menuRef","editorNodeRef","borderColor","isCircle","isRadius","isDiamond","borderClass","dragging","menuList","delete","handleClickMenu","handleClickNode","newPosition","transform","triggerNode","parentNode","Item","EditorEdges","links","nodes","selectedLinks","onSelectLink","isDraggingLink","dragLink","edgesPath","link","source","sourcePos","targetPos","uNode","vertex","vNode","sourceY","targetY","originX","originY","renderDraggingLink","findNearbyNode","point","range","targetNode","minDis","Infinity","forEach","v","minDistance","sqrt","distance","Utils","Point","CanvasContent","nodesContainerRef","screenWidth","screenHeight","autoVerticalScroller","autoHorizontalScroller","handleAdapt","openContainerMenu","toggleDragNode","isDraggingNode","onDragNodeMouseMove","onDragNodeMouseUp","toggleDragLink","onDragLinkMouseMove","onDragLinkMouseUp","setState","preState","onNodesContainerMouseDown","component","c","dataset","onDragLinkMouseDown","onDragNodeMouseDown","onContainerMouseDown","hasNodeOrLink","handleClearActive","onNodesContainerMouseMove","isNodeOrLink","currentHoverNode","dragNode","dragNodeOffset","originId","setLinks","state","nearNode","newLink","setNodes","getTransformInfo","setCurrTrans","getScreenHandler","handleMap","setSelectedLinks","setSelectedNodes","array","inNode","inLink","index","slice","onClickNode","selectedNodes","isKeyPressing","onSelectNode","deleteNodes","onContextMenuLink","currentPos","deleteVisible","updateNodes","renderCanvas","menuDisplay","this","nextProps","nextState","newNode","NODE_WIDTH","NODE_HEIGHT","uuid","needMinimap","needRefresh","zoomEnabled","mapPosition","mapWidth","mapHeight","mapRectStyle","focusEnabled","onScreenChange","onDragOver","onDrop","useEditorStore","editorData","setEditorData","initialValue","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","a","Promise","resolve","valueToStore","Function","setItem","stringify","useLocalStorage","editorLocalData","setEditorLocalData","setDragNode","zoomIdentity","copiedNodes","setCopiedNodes","newNodes","handleSaveData","result","findIndex","updateLinks","newLinks","aliasKeyCodeMap","esc","tab","enter","space","up","down","aliasKeyMap","modifierKey","ctrl","ctrlKey","shift","shiftKey","alt","altKey","meta","metaKey","noop","isType","obj","prototype","toString","call","genFilterKey","keyFilter","keyCode","genArr","split","genLen","genModifier","aliasKey","aliasKeyCode","toUpperCase","genKeyFormater","some","defaultEvents","useKeyPress","eventHandler","option","events","callbackRef","callbackHandler","genGuard","targetElement","EditorDemo","dragSelectable","setDragSelectable","screenRef","canvasRef","getWrappedInstance","canvasInstance","handleDeleteNodes","ids","cloneNodes","handleDeleteLinks","activeLinks","linkList","diffLinks","handleNodesCopy","newCopiedNodes","handleShear","handleCopy","handlePaste","currentCopied","handleNodesPaste","handleDelete","handleSave","alert","isMac","platform","startsWith","renderOperation","layout","renderNodePanel","strokeDasharray","selectorProps","points","poly","p","px","py","flag","l","j","sx","sy","tx","ty","pointInPoly","deleteLinks","renderProperty","rootElement","getElementById","render"],"mappings":"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","file":"static/js/main.3803b782.chunk.js","sourcesContent":["/**\n * @file 管道画布常量定义\n */\n\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { Icon } from \"antd\";\n\n// 组件卡片宽度高度\nexport const NODE_WIDTH = 220;\nexport const NODE_HEIGHT = 60;\n\n// 右边菜单栏宽度\nexport const MENU_WIDTH = 120;\nexport const MENU_HEIGHT = 196;\n// 右边抽屉宽度-通用\nexport const RIGHTDRAWER_WIDTH = 521;\n// 右边抽屉宽度-调度配置\nexport const SHECHEDULE_RIGHTDRAWER_WIDTH = 750;\n\n// 支持缩放的最大值跟最小值\nexport const MAX_SCALE = 200;\nexport const MIN_SCALE = 50;\n\n// 组件之间的间距\nexport const COMPONENT_DISTANCE = 30;\n\n// 全屏状态的坐标差,顶部导航到画布的距离\nexport const fullscreenDiffY = 130;\n\n// 顶部导航到画布的固定举例，用于计算Context\nexport const CONTEXT_HEIGHT_DIFF = 155;\n\n// 连接符\nexport const CONNECTOR = \"_\";\n\n// 连线可连线的区域\nexport const LINK_AREA = 30;\n\n// 连线不同状态的颜色\n// 未连接状态\nexport const UNLINK = \"#52619b\";\n// 选中状态\nexport const ACTIVE = \"#92ade3\";\n// 连接状态\nexport const LINK = \"#b4bdcf\";\n\n// 管道节点code为30，为固定值\nexport const operatorTypeCode = 30;\n\ninterface StatusItem {\n  key: string;\n  text: string;\n  icon: React.ReactNode;\n}\n\n// 组件库类型\nexport enum ComponentType {\n  /** 通用 */\n  common = \"common\"\n  /** 自定义 */\n  // self = 'self'\n}\n\nexport const ComponentMap: Record<ComponentType, string> = {\n  [ComponentType.common]: \"通用\"\n  // [ComponentType.self]: '自定义'\n};\n\nexport class Node {\n  /** 组件类型 */\n  type?: string;\n\n  /** 组件key */\n  key: string;\n\n  /** 组件名称 */\n  name: string;\n\n  /** 组件icon */\n  icon?: React.ReactNode;\n\n  /** 组件在画布中的横坐标 */\n  x?: number;\n\n  /** 组件在画布中的纵坐标 */\n  y?: number;\n  /** 生成 id */\n\n  width?: number;\n\n  height?: number;\n\n  id?: string;\n\n  /** 对应的 ref */\n  ref?: any;\n\n  /** 数据分发方式, true:轮流 false:copy */\n  distribute?: boolean;\n\n  /** 其他配置信息 */\n  webConfig?: {};\n\n  disabled?: boolean;\n}\n\nexport class NodePanel {\n  type: string;\n\n  key: string;\n\n  name: string;\n\n  icon: React.ReactNode;\n\n  disabled: boolean;\n}\n\nexport enum OutputType {\n  /** 主步骤输出 */\n  mainOutput = \"mainOutput\",\n  /** 错误步骤输出 */\n  errorOutput = \"errorOutput\"\n}\n\nexport type LINK_POSITION = \"left\" | \"right\" | \"top\" | \"bottom\";\n\nexport interface Link {\n  /** 连线的唯一id, source+CONNECTOR+target的形式 */\n  id: string;\n  /** 来源节点id */\n  source: string;\n  /** 去向节点id */\n  target: string;\n  /** 来源节点位置 */\n  sourcePos?: string;\n  /** 去向节点位置 */\n  targetPos?: string;\n}\n\nexport type LinkType = \"error\" | \"distribute\" | \"copy\";\n\n// 连线中不同状态的icon\nexport const LinkTypeIconMap: Record<LinkType, string> = {\n  error: \"icon-cuowu\",\n  distribute: \"icon-fenfa\",\n  copy: \"icon-fuzhi1\"\n};\n\n// 连线中的icon，宽高\nexport const LINKICON_WIDTH = 18;\nexport const LINKICON_HEIGHT = 18;\n\nexport enum ComponentKey {\n  rect = \"rect\",\n  rectRadius = 'rectRadius',\n  circle = \"circle\",\n  diamond = \"diamond\",\n  polygon = \"polygon\",\n  ellipse = \"ellipse\",\n  star = \"star\"\n}\n\n// 单元类型\n// 输入组件\nconst COMMON_COMPONENT: Node[] = [\n  /** 矩形 */\n  {\n    type: ComponentType.common,\n    key: ComponentKey.rect,\n    name: \"RECT\",\n    width: 100,\n    height: 100,\n    icon: (\n      <div style={{ width: 36, height: 36, border: \"2px solid #52619b\" }} />\n    ),\n    disabled: false\n  },\n  /** 矩形带圆角 */\n  {\n    type: ComponentType.common,\n    key: ComponentKey.rectRadius,\n    name: \"RECT-RADIU\",\n    width: 100,\n    height: 100,\n    icon: (\n      <div style={{ width: 36, height: 36, border: \"2px solid #52619b\", borderRadius: 10 }} />\n    ),\n    disabled: false\n  },\n  /** 圆形 */\n  {\n    type: ComponentType.common,\n    key: ComponentKey.circle,\n    name: \"CIRCLE\",\n    width: 100,\n    height: 100,\n    icon: (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        version=\"1.1\"\n        width=\"72px\"\n        height=\"40px\"\n      >\n        <circle\n          cx=\"36\"\n          cy=\"20\"\n          r=\"18\"\n          stroke=\"#52619b\"\n          strokeWidth=\"2\"\n          fill=\"transparent\"\n        />\n      </svg>\n    ),\n    disabled: false\n  },\n  /** TODO 菱形 */\n  // {\n  //   type: ComponentType.common,\n  //   key: ComponentKey.diamond,\n  //   name: \"DIAMOND\",\n  //   width: 100,\n  //   height: 100,\n  //   icon: (\n  //     <div className=\"diamond\">\n        \n  //     </div>\n  //   ),\n  //   disabled: false\n  // }\n  /** 多边形 */\n  // {\n  //   type: ComponentType.common,\n  //   key: ComponentKey.polygon,\n  //   name: 'POLYGON',\n  //   icon: <Icon type=\"border\" />,\n  //   width: 100,\n  //   height: 100,\n  //   disabled: true\n  // },\n  // /** 椭圆 */\n  // {\n  //   type: ComponentType.common,\n  //   key: ComponentKey.ellipse,\n  //   name: 'ELLIPSE',\n  //   icon: <Icon type=\"border\" />,\n  //   width: 100,\n  //   height: 100,\n  //   disabled: true\n  // }\n];\n\n// const SELF_COMPONENT: Node[] = [\n//   {\n//     type: ComponentType.self,\n//     key: ComponentKey.star,\n//     name: 'STAR'\n//   }\n// ];\n\n// 组件库类目\nexport const COMPONENT_CATEGORY: Record<ComponentType, Node[]> = {\n  [ComponentType.common]: COMMON_COMPONENT\n  // [ComponentType.self]: SELF_COMPONENT\n};\n\nexport const keyCodeMap = {\n  delete: 8,\n  copy: 67,\n  paste: 86\n};\n\n/** 处理弹窗全屏挂载 */\nexport function getContainer() {\n  const pipelineDoms = document.getElementsByClassName(\"pipeline-canvas\");\n  return _.find(\n    pipelineDoms,\n    dom => (dom as HTMLElement).offsetParent\n  ) as HTMLElement;\n}\n\n/**\n * @file 类型定义文件\n */\nclass Vertex {\n  id: string;\n\n  x: number;\n\n  y: number;\n\n  width: number;\n\n  height: number;\n}\n\nclass Edge {\n  u: string;\n\n  v: string;\n}\n\ntype MenuType = \"vertex\" | \"edge\";\nclass MenuPos {\n  id?: string;\n\n  x: number;\n\n  y: number;\n}\n\n// 节点宽高\nexport const VERTEX_WIDTH = 180;\nexport const VERTEX_HEIGHT = 32;\n\nexport { Vertex, Edge, MenuPos };\n\n// 操作类型\nexport enum OperateType {\n  configuration = \"configuration\",\n  copy = \"copy\",\n  delete = \"delete\",\n  parallelism = \"parallelism\",\n  outputType = \"outputType\",\n  mainOutput = \"mainOutput\",\n  errorOutput = \"errorOutput\",\n  dataMethod = \"dataMethod\",\n  copyMethod = \"copyMethod\",\n  distribute = \"distribute\",\n  paste = \"paste\",\n  deleteLink = \"deleteLink\",\n  selectAll = \"selectAll\",\n  dragSelect = \"dragSelect\"\n}\n","/**\n * @file 画布侧边栏组件库面板\n * @author perkinJ\n */\n\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport classNames from \"classnames\";\nimport { Collapse } from \"antd\";\nimport {\n  ComponentType,\n  ComponentMap,\n  COMPONENT_CATEGORY,\n  Node\n} from \"../defines\";\nimport \"./NodePanel.scss\";\n\nconst { useState, useEffect } = React;\nconst Panel = Collapse.Panel;\n\ninterface NodePanelProps {\n  visible?: boolean;\n  onDrag?: (item: Node) => void;\n}\n\nexport default function NodePanel(props: NodePanelProps) {\n  const componnetList = Object.values(ComponentType);\n  const { onDrag, visible = false } = props;\n\n  // 默认取第一个\n  const [collapseKey, setCollapseKey] = useState<string[]>([componnetList[0]]);\n\n  const boxClass = classNames(\"nodePanel-box\", {\n    \"nodePanel-box-visible\": visible\n  });\n\n  /** 处理Collapse展开 */\n  const handleCollapseKey = (items: string[] | string) => {\n    setCollapseKey(items as string[]);\n  };\n\n  const handleDrag = (item: Node) => {\n    if (onDrag) {\n      onDrag(item);\n    }\n  };\n\n  return (\n    <div className=\"nodePanel\">\n      <div className={boxClass}>\n        <div className=\"nodePanel-box-collapse\">\n          <Collapse\n            activeKey={collapseKey}\n            onChange={handleCollapseKey}\n            bordered={true}\n            accordion\n          >\n            {componnetList.map(item => {\n              const total = COMPONENT_CATEGORY[item].length;\n              return (\n                <Panel\n                  key={item}\n                  header={\n                    <div className=\"collapse-title\">{`${\n                      ComponentMap[item]\n                    } (${total})`}</div>\n                  }\n                >\n                  <div className=\"components-box\">\n                    {COMPONENT_CATEGORY[item].map(child => {\n                      const boxItemClass = classNames(\"components-box-item\", {\n                        \"components-box-item-disabled no-drop\": child.disabled\n                      });\n                      return (\n                        <div\n                          className={boxItemClass}\n                          key={child.key}\n                          draggable={true}\n                          onDrag={handleDrag.bind(null, child)}\n                        >\n                          <div className=\"components-box-item-icon\">\n                            {child.icon}\n                          </div>\n                          {/* {child.name} */}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </Panel>\n              );\n            })}\n          </Collapse>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * @file 全屏工具类\n * @author perkinJ\n */\n\n/**\n * 全屏某一个元素\n * @param element\n */\nfunction launchFullscreen(element: any) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  }\n}\n/**\n * 退出全屏\n */\nfunction exitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if ((document as any).webkitExitFullscreen) {\n    (document as any).webkitExitFullscreen();\n  }\n}\n\n/**\n * 判断是否处于全屏状态\n */\nfunction isFull() {\n  const doc = document as any;\n  return doc.fullscreenElement || doc.webkitFullscreenElement;\n}\nexport { launchFullscreen, exitFullscreen, isFull };\n","/**\n * @file 画布操作导航\n * @author perkinJ\n */\n\nimport * as React from \"react\";\nimport { Icon } from \"antd\";\nimport classNames from \"classnames\";\nimport {\n  launchFullscreen,\n  exitFullscreen,\n  isFull\n} from \"../utils/FullsreenUtils\";\nimport { MIN_SCALE, MAX_SCALE } from \"../defines\";\nimport \"./Toolbar.scss\";\n\n/** 操作面板，支持全屏、缩放、自适应画布、格式化、显示比例 */\n\nexport type ToolbarType =\n  | \"save\"\n  | \"fullscreen\"\n  | \"zoom\"\n  | \"adapt\"\n  | \"format\"\n  | \"ratio\"\n  | \"shear\"\n  | \"copy\"\n  | \"paste\"\n  | \"delete\"\n  | \"dragSelect\";\n\nexport class ToolbarProps {\n  /** 适应画布 */\n  handleShowAll?: () => void;\n\n  /** 缩放 */\n  handleResizeTo?: (scale: number) => void;\n\n  /** 改变屏幕缩放大小 */\n  changeScreenScale?: (scale: number) => void;\n\n  /** 缩放大小 */\n  screenScale?: number;\n\n  /** 格式化布局 */\n  layout?: () => void;\n\n  onSave?: () => void;\n\n  onShear?: () => void;\n\n  onCopy?: () => void;\n\n  onPaste?: () => void;\n\n  onDelete?: () => void;\n\n  onDragSelect?: () => void;\n\n  /** 处理全屏 */\n  // handleFullScreen?: () => void;\n  /** Toolbar选项 */\n  items?: ToolbarType[];\n\n  /**  */\n}\n\nconst Toolbar = React.forwardRef((props: ToolbarProps, ref: any) => {\n  const {\n    screenScale,\n    changeScreenScale,\n    handleResizeTo,\n    items,\n    onShear,\n    onCopy,\n    onPaste,\n    onDelete,\n    onDragSelect,\n    onSave\n  } = props;\n  const scale = String(Math.round(screenScale));\n\n  /** 是否保存 */\n  const isSave = items.includes(\"save\");\n\n  /** 是否支持全屏 */\n\n  const isFullScreen = items.includes(\"fullscreen\");\n\n  /** 是否支持缩放 */\n  const isZoom = items.includes(\"zoom\");\n\n  /** 是否支持适应画布 */\n  const isAdapt = items.includes(\"adapt\");\n\n  /** 是否支持格式化 */\n  const isFormat = items.includes(\"format\");\n\n  /** 剪切 */\n  const isShear = items.includes(\"shear\");\n  /** 是否支持复制 */\n  const isCopy = items.includes(\"copy\");\n\n  const isPaste = items.includes(\"paste\");\n\n  const isDelete = items.includes(\"delete\");\n\n  const isDragSelect = items.includes(\"dragSelect\");\n\n  /** 当前是否是全屏状态 */\n\n  const fullscreenStatus = isFull();\n\n  /** 缩放操作 */\n  const handleResize = (isLager?: boolean) => {\n    let value = screenScale;\n    if (isLager) {\n      value = screenScale + 10;\n      if (value > MAX_SCALE) {\n        value = MAX_SCALE;\n      }\n    } else {\n      value = screenScale - 10;\n      if (value < MIN_SCALE) {\n        value = MIN_SCALE;\n      }\n    }\n    handleResizeTo(value / 100);\n    changeScreenScale(value);\n  };\n\n  /** 处理全屏事件 */\n  const handleFullScreen = () => {\n    const isfull = isFull();\n    if (isfull) {\n      exitFullscreen();\n    } else {\n      launchFullscreen(ref.current);\n    }\n  };\n\n  // 渲染按钮\n  const renderButtons = () => {\n    const fullScreenClassName = classNames({\n      fullscreen: !fullscreenStatus,\n      \"fullscreen-exit\": fullscreenStatus\n    });\n\n    return (\n      <>\n        {isZoom && (\n          <>\n            <div className=\"toolbar-btn\">\n              <Icon type=\"zoom-in\" onClick={handleResize.bind(null, true)} />\n            </div>\n            <div className=\"toolbar-btn\">\n              <Icon type=\"zoom-out\" onClick={handleResize.bind(null, false)} />\n            </div>\n          </>\n        )}\n        {isSave && (\n          <div className=\"toolbar-btn\">\n            <Icon type=\"save\" onClick={onSave} />\n          </div>\n        )}\n\n        {/* {isAdapt && (\n          <div className=\"adapt\">\n            <Tooltip placement=\"top\" title={I18N.DAG.DAGScreen.adapt}>\n              <Icon\n                type=\"dpicon icon-adapt\"\n                onClick={() => {\n                  props.handleShowAll();\n                }}\n              />\n            </Tooltip>\n          </div>\n        )}\n        {isFormat && (\n          <div className=\"format\">\n            <Tooltip placement=\"top\" title={I18N.PipelineCanvas.utils.format}>\n              <Icon\n                type=\"one-icon icon-geshihuabuju anticon-dpicon\"\n                onClick={() => {\n                  props.layout();\n                }}\n              />\n            </Tooltip>\n          </div>\n        )} */}\n        {isFullScreen && (\n          <div className=\"toolbar-btn\">\n            <Icon type={fullScreenClassName} onClick={handleFullScreen} />\n          </div>\n        )}\n\n        {isShear && (\n          <div className=\"toolbar-btn\">\n            <Icon type=\"scissor\" onClick={onShear} />\n          </div>\n        )}\n\n        {isCopy && (\n          <div className=\"toolbar-btn\">\n            <Icon type=\"copy\" onClick={onCopy} />\n          </div>\n        )}\n\n        {isPaste && (\n          <div className=\"toolbar-btn\">\n            <Icon type=\"snippets\" onClick={onPaste} />\n          </div>\n        )}\n        {isDelete && (\n          <div className=\"toolbar-btn\">\n            <Icon type=\"delete\" onClick={onDelete} />\n          </div>\n        )}\n\n        {isDragSelect && (\n          <div className=\"toolbar-btn\">\n            <Icon type=\"border-outer\" onClick={onDragSelect} />\n          </div>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"toolbar\">\n      <div className=\"toolbar-scale\">{scale}%</div>\n      <div className=\"toolbar-button\">{renderButtons()}</div>\n    </div>\n  );\n});\n\nexport default Toolbar;\n","/**\n * @file 通用边组件\n * @author perkinJ\n */\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { CONNECTOR, StyleProps } from \"../utils/types\";\nimport \"./Edge.scss\";\n\nexport interface EdgeProps {\n  /** 元素id，唯一 */\n  id?: string;\n  /** 线条路径 */\n  path?: string;\n  /** 起始端的箭头, 为true时为默认的箭头效果，也可以是一个自定义箭头 */\n  startArrow?: boolean | React.SVGProps<SVGForeignObjectElement>;\n  /** 末尾端的箭头, 为true时为默认的箭头效果，也可以是一个自定义箭头 */\n  endArrow?: boolean | React.SVGProps<SVGForeignObjectElement>;\n  /** 边的击中范围\t */\n  lineAppendWidth?: number;\n  /** 元素样式 */\n  style?: StyleProps;\n  /** 自定义形状 */\n  object?: React.SVGProps<SVGForeignObjectElement>;\n  /** 鼠标点击事件 */\n  onClick?: (event: any) => void;\n  /** 右键事件 */\n  onContextMenu?: (event: any) => void;\n}\n\nexport default function Edge(props: EdgeProps) {\n  const {\n    id,\n    style,\n    onContextMenu,\n    onClick,\n    object,\n    lineAppendWidth,\n    path,\n    startArrow,\n    endArrow\n  } = props;\n  const { fill } = style;\n\n  let markerStart = \"\";\n  if (typeof startArrow === \"boolean\") {\n    if (startArrow) {\n      markerStart = \"url(#flow-startArrow)\";\n    }\n  } else if (React.isValidElement(startArrow)) {\n    markerStart = `url(#${(startArrow.props as any).id})`;\n  }\n\n  let endStart = \"\";\n  if (typeof endArrow === \"boolean\") {\n    if (startArrow) {\n      endStart = \"url(#flow-startArrow)\";\n    }\n  } else if (React.isValidElement(endArrow)) {\n    endStart = `url(#${(endArrow.props as any).id})`;\n  }\n\n  return (\n    <g key={`${id}${CONNECTOR}`} className=\"editor-link\">\n      <defs>\n        {React.isValidElement(startArrow) ? (\n          React.cloneElement(startArrow)\n        ) : (\n          <marker\n            id=\"flow-startArrow\"\n            markerWidth=\"10\"\n            markerHeight=\"10\"\n            refX=\"0\"\n            refY=\"2\"\n            orient=\"auto\"\n            markerUnits=\"strokeWidth\"\n          >\n            <path d=\"M0,0 L0,4 L4,2 z\" fill={fill} />\n          </marker>\n        )}\n      </defs>\n      <defs>\n        {React.isValidElement(endArrow) ? (\n          React.cloneElement(endArrow)\n        ) : (\n          <marker\n            id=\"flow-endArrow\"\n            markerWidth=\"10\"\n            markerHeight=\"10\"\n            refX=\"0\"\n            refY=\"2\"\n            orient=\"auto\"\n            markerUnits=\"strokeWidth\"\n          >\n            <path d=\"M0,0 L0,4 L4,2 z\" fill={fill} />\n          </marker>\n        )}\n      </defs>\n      <path\n        key={id}\n        className=\"editor-link-path\"\n        stroke={_.get(style, \"stroke\", \"\")}\n        strokeWidth={_.get(style, \"strokeWidth\", 0)}\n        d={path}\n        markerStart={markerStart}\n        markerEnd={endStart}\n      />\n      {/** 这里增加一个虚拟背景，增加连线的两边可点击区域，提高用户体验 */}\n      <path\n        key={`${id}-background`}\n        className=\"editor-link-path editor-link-path-background\"\n        style={{ strokeWidth: lineAppendWidth }}\n        d={path}\n        onContextMenu={onContextMenu}\n        onClick={onClick}\n      />\n      <g>{object}</g>\n    </g>\n  );\n}\n","/**\n * @file 公共类型定义文件\n * @author perkinJ\n */\n\n// 连接符\nexport const CONNECTOR = '_';\n\n// 点坐标\nexport class Point {\n  x: number;\n\n  y: number;\n}\n\n// 节点支持的形状\nexport type Shape = 'rect' | 'circle' | 'ellipse' | 'poly';\n\n// 方向\nexport type Direction = 'left' | 'right';\n\n// 圈选器节点属性\nexport class ShapeProps {\n  x: number;\n\n  y: number;\n\n  width: number;\n\n  height: number;\n\n  direction: Direction;\n}\n\n// 通用svg元素样式\nexport class StyleProps {\n  /** 填充色 */\n  fill?: string;\n\n  /** 边框宽度 */\n  strokeWidth?: number;\n\n  /** 颜色 */\n  stroke?: string;\n\n  /** 虚线间隔 */\n  strokeDasharray?: string;\n}\n","/**\n * @file 通用节点组件\n * @desc 与画布联动，用于计算画布位置、缩放等\n * @author perkinJ\n */\n\nimport * as React from \"react\";\nimport { useResize } from \"../hooks/useResize\";\nimport \"./Node.scss\";\n\nconst { useRef, useState, useEffect, useCallback } = React;\n\nclass NodeProps {\n  /** 节点id */\n  id: string;\n\n  /** 节点横坐标 */\n  x: number;\n\n  /** 节点纵坐标 */\n  y: number;\n\n  width: number;\n\n  height: number;\n\n  /** 点击节点 */\n  onClick?: (event) => void;\n\n  /** ContextMenu */\n  onContextMenu?: (position: any, event) => void;\n\n  /** 当前节点信息 */\n  node?: any;\n\n  /** 外部画布属性 */\n  currTrans?: any;\n\n  /** 是否被点击 */\n  isSelected: boolean;\n\n  children?: React.ReactNode;\n\n  /** 改变节点大小 */\n  onResize?: (width: number, height: number, x: number, y: number) => void;\n}\n\n/**\n * 获取元素相对于页面的绝对位置\n */\nexport function getOffset(domNode: any) {\n  let offsetTop = 0;\n  let offsetLeft = 0;\n  let targetDomNode = domNode;\n  while (targetDomNode !== window.document.body && targetDomNode != null) {\n    offsetLeft += targetDomNode.offsetLeft;\n    offsetTop += targetDomNode.offsetTop;\n    targetDomNode = targetDomNode.offsetParent;\n  }\n  return {\n    offsetTop,\n    offsetLeft\n  };\n}\n\nconst Node = React.forwardRef((props: NodeProps, ref: any) => {\n  const {\n    x,\n    y,\n    id,\n    onClick,\n    onContextMenu,\n    children,\n    currTrans,\n    width,\n    height,\n    isSelected,\n    onResize\n  } = props;\n\n  const [showSelector, setShowSelector] = useState(false);\n  const containerRef = useRef(null);\n\n  // 获取伸缩的大小\n  const {\n    width: resizeWidth,\n    height: resizeHeight,\n    x: resizeX,\n    y: resizeY\n  } = useResize(isSelected, {\n    width,\n    height,\n    x,\n    y\n  });\n\n  const handleContextMenu = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const container = containerRef.current.getBoundingClientRect();\n    container.id = id;\n    const { offsetTop, offsetLeft } = getOffset(container.current);\n\n    // The position ⟨x,y⟩ is transformed to ⟨xk + tx,yk + ty⟩\n    const screenX = event.clientX - offsetLeft;\n    const screenY = event.clientY - offsetTop;\n\n    const newX = (screenX - x) / currTrans.k;\n    const newY = (screenY - y) / currTrans.k;\n\n    const currentPos = {\n      left: newX,\n      top: newY\n    };\n\n    if (onContextMenu) {\n      onContextMenu(currentPos, event);\n    }\n  };\n\n  const NODE_SELECTOR = [\n    {\n      position: \"left\",\n      style: { left: \"-5px\", top: `${height / 2 - 5}px` }\n    },\n    {\n      position: \"right\",\n      style: { right: \"-5px\", top: `${height / 2 - 5}px` }\n    },\n    {\n      position: \"top\",\n      style: { left: `${width / 2 - 5}px`, top: \"-5px\" }\n    },\n    {\n      position: \"bottom\",\n      style: { left: `${width / 2 - 5}px`, top: `${height - 5}px` }\n    }\n  ];\n\n  const RESIZE_SELECTOR = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-left\",\n    \"bottom-right\"\n  ];\n\n  // 伸缩器\n  const renderResize = (\n    <div className=\"resizable\">\n      <div className=\"resizers\">\n        {RESIZE_SELECTOR.map(item => (\n          <div key={item} className={`resizer ${item}`} data-type=\"resize\" />\n        ))}\n      </div>\n    </div>\n  );\n\n  // 连线节点选择器\n  const renderNodeSelector = (\n    <div className=\"editor-node-selector\" style={{ width, height }}>\n      {NODE_SELECTOR.map(item => {\n        return (\n          <a\n            data-type=\"edge\"\n            data-position={item.position}\n            key={item.position}\n            className={`node-selector`}\n            style={item.style}\n          />\n        );\n      })}\n    </div>\n  );\n\n  useEffect(() => {\n    onResize(resizeWidth, resizeHeight, resizeX, resizeY);\n  }, [resizeWidth, resizeHeight, resizeX, resizeY]);\n\n  return (\n    <div\n      className=\"editor-node\"\n      style={{\n        left: x,\n        top: y,\n        width,\n        height\n      }}\n      ref={ref}\n      onClick={onClick}\n      onMouseEnter={() => setShowSelector(true)}\n      onMouseLeave={() => setShowSelector(false)}\n      onContextMenu={handleContextMenu}\n    >\n      {(isSelected || showSelector) && renderNodeSelector}\n      {isSelected && renderResize}\n      {React.cloneElement(children as React.ReactElement<any>, {\n        ref: containerRef\n      })}\n    </div>\n  );\n});\n\nexport default Node;\n","import { useState, useEffect } from 'react';\n\nclass NodeInfo {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n}\n\nconst useResize = (isResize: boolean, { width, height, x, y }: NodeInfo): NodeInfo => {\n  const [nodeWidth, setNodeWidth] = useState(width);\n  const [nodeHeight, setNodeHeight] = useState(height);\n  const [nodeLeft, setNodeLeft] = useState(x);\n  const [nodeTop, setNodeTop] = useState(y);\n\n  useEffect(() => {\n    setNodeLeft(x);\n    setNodeTop(y);\n  }, [x, y]);\n\n  useEffect(() => {\n    const resizers = document.querySelectorAll('.resizer');\n    const element = document.querySelector('.resizable');\n    const minSize = 20;\n    // 初始高度宽度\n    let originWidth = 0;\n    let originHeight = 0;\n    // 节点的初始位置\n    let originX = 0;\n    let originY = 0;\n    // 鼠标拖拽的初始位置\n    let originMouseX = 0;\n    let originMouseY = 0;\n    if (isResize) {\n      for (let i = 0; i < resizers.length; i++) {\n        const currentResizer = resizers[i];\n        currentResizer.addEventListener('mousedown', e => {\n          e.preventDefault();\n\n          originWidth = parseFloat(\n            getComputedStyle(element, null)\n              .getPropertyValue('width')\n              .replace('px', '')\n          );\n          originHeight = parseFloat(\n            getComputedStyle(element, null)\n              .getPropertyValue('height')\n              .replace('px', '')\n          );\n          originX = element.getBoundingClientRect().left;\n          originY = element.getBoundingClientRect().top;\n          originMouseX = (e as any).pageX;\n          originMouseY = (e as any).pageY;\n\n          // 变更type\n          window.addEventListener('mousemove', resize);\n          window.addEventListener('mouseup', stopResize);\n        });\n        const resize = e => {\n          let newWidth = 0;\n          let newHeight = 0;\n          let newLeft = 0;\n\n          if (currentResizer.classList.contains('bottom-right')) {\n            newWidth = originWidth + (e.pageX - originMouseX);\n            newHeight = originHeight + (e.pageY - originMouseY);\n            if (newWidth > minSize) {\n              setNodeWidth(newWidth);\n            }\n            if (newHeight > minSize) {\n              setNodeHeight(newHeight);\n            }\n          } else if (currentResizer.classList.contains('bottom-left')) {\n            newWidth = originWidth - (e.pageX - originMouseX);\n            newHeight = originHeight + (e.pageY - originMouseY);\n            if (newWidth > minSize) {\n              setNodeWidth(newWidth);\n              setNodeLeft(nodeLeft + (e.pageX - originMouseX));\n            }\n            if (newHeight > minSize) {\n              setNodeHeight(newHeight);\n            }\n          } else if (currentResizer.classList.contains('top-right')) {\n            newWidth = originWidth + (e.pageX - originMouseX);\n            newHeight = originHeight - (e.pageY - originMouseY);\n            if (newWidth > minSize) {\n              setNodeWidth(newWidth);\n            }\n            if (newHeight > minSize) {\n              setNodeHeight(newHeight);\n              setNodeTop(nodeTop + (e.pageY - originMouseY));\n            }\n          } else {\n            newWidth = originWidth - (e.pageX - originMouseX);\n            newHeight = originHeight - (e.pageY - originMouseY);\n            if (width > minSize) {\n              setNodeWidth(newWidth);\n              setNodeLeft(nodeLeft + (e.pageX - originMouseX));\n            }\n            if (height > minSize) {\n              setNodeHeight(newHeight);\n              setNodeTop(nodeTop + (e.pageY - originMouseY));\n            }\n          }\n        };\n\n        const stopResize = () => {\n          window.removeEventListener('mousemove', resize);\n        };\n      }\n    }\n  }, [isResize, nodeWidth, nodeHeight, setNodeHeight, setNodeWidth, nodeTop, nodeLeft, setNodeTop, setNodeLeft]);\n\n  return {\n    width: nodeWidth,\n    height: nodeHeight,\n    x: nodeLeft,\n    y: nodeTop\n  };\n};\n\nexport { useResize };\n","/**\n * @file 画布底层位置计算相关方法\n * @author 剑决(perkin.pj)\n */\n\nimport * as _ from \"lodash\";\nimport { Point, Shape, ShapeProps } from \"./types\";\n/**\n * 两点间直线距离\n * @param sourcePoint\n * @param targetPoint\n */\nexport function distance(sourcePoint: Point, targetPoint: Point) {\n  const x = sourcePoint.x - targetPoint.x;\n  const y = sourcePoint.y - targetPoint.y;\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * 两点间曲线\n * @param sourcePoint\n * @param targetPoint\n */\nexport const quadratic = (sourcePoint: Point, targetPoint: Point): string => {\n  const ratio = detectZoom();\n  const sourceX = sourcePoint.x * ratio;\n  const targetX = targetPoint.x * ratio;\n\n  const centerX = (sourceX + targetX) / 2;\n  const centerY = (sourcePoint.y + targetPoint.y) / 2;\n  let tolerance = 30;\n\n  const sub = targetPoint.y - sourcePoint.y;\n\n  if (sub > -100 && sub < 100) {\n    tolerance = Math.max(Math.abs(targetPoint.y - sourcePoint.y) / 2, 20);\n  }\n\n  return [\n    \"M\",\n    sourceX,\n    sourcePoint.y,\n    \"Q\",\n    /** 横向与竖向有区别 */\n    sourceX + tolerance,\n    sourcePoint.y,\n    centerX,\n    centerY,\n    \"T\",\n    targetX - 6,\n    targetPoint.y - 2\n  ].join(\" \");\n};\n\n/**\n * 计算屏幕缩放比例\n */\nexport function detectZoom() {\n  let ratio = window.outerWidth / window.innerWidth;\n  const screen = window.screen;\n  const ua = navigator.userAgent.toLowerCase();\n\n  if (window.devicePixelRatio !== undefined) {\n    // 由于mac retina屏幕devicePixelRatio会扩大2倍，这里mac统一用window.outerWidth / window.innerWidth表示ratio\n    const isMac = /macintosh|mac os x/i.test(ua);\n\n    ratio = isMac\n      ? window.outerWidth / window.innerWidth\n      : window.devicePixelRatio;\n  } else if (ua.indexOf(\"msie\") > -1) {\n    if ((screen as any).deviceXDPI && (screen as any).logicalXDPI) {\n      ratio = (screen as any).deviceXDPI / (screen as any).logicalXDPI;\n    }\n  } else if (\n    window.outerWidth !== undefined &&\n    window.innerWidth !== undefined\n  ) {\n    ratio = window.outerWidth / window.innerWidth;\n  }\n\n  if (ratio) {\n    ratio = Math.round(ratio * 100) / 100;\n  }\n\n  return ratio;\n}\n\n/**\n * 获取元素相对于页面的绝对位置\n */\nexport function getOffset(domNode: any, parentElem = window.document.body) {\n  let offsetTop = 0;\n  let offsetLeft = 0;\n  let targetDomNode = domNode;\n  const ratio = detectZoom();\n  while (targetDomNode !== parentElem && targetDomNode != null) {\n    offsetLeft += targetDomNode.offsetLeft;\n    offsetTop += targetDomNode.offsetTop;\n    targetDomNode = targetDomNode.offsetParent;\n  }\n  return {\n    offsetTop,\n    offsetLeft\n  };\n}\n\n/** 获取元素在页面上占据的高度 */\nexport function getHeight(dom: HTMLElement) {\n  if (!dom) {\n    return 0;\n  }\n  const style = window.getComputedStyle(dom);\n  return (\n    dom.getBoundingClientRect().height +\n    Number(style.marginTop.match(/\\d+/g)) +\n    Number(style.marginBottom.match(/\\d+/g))\n  );\n}\n\n// 获取元素在页面上占据的宽度\nexport function getWidth(dom: HTMLElement) {\n  if (!dom) {\n    return 0;\n  }\n  const style = window.getComputedStyle(dom);\n  return (\n    dom.getBoundingClientRect().width +\n    Number(style.marginLeft.match(/\\d+/g)) +\n    Number(style.marginRight.match(/\\d+/g))\n  );\n}\n\n/** 获取元素在页面的绝对位置 */\nexport function getPosition(dom: HTMLElement) {\n  if (!dom) {\n    return 0;\n  }\n  return {\n    x: dom.getBoundingClientRect().x,\n    y: dom.getBoundingClientRect().y\n  };\n}\n\nexport function calcLinkPosition(node, position) {\n  let x = node?.x + node?.width;\n  let y = node?.y + node?.height / 2;\n  if (position === \"left\") {\n    x = node?.x;\n    y = node?.y + node?.height / 2;\n  } else if (position === \"right\") {\n    x = node?.x + node?.width;\n    y = node?.y + node?.height / 2;\n  } else if (position === \"top\") {\n    x = node?.x + node?.width / 2;\n    y = node?.y;\n  } else if (position === \"bottom\") {\n    x = node?.x + node?.width / 2;\n    y = node?.y + node?.height;\n  }\n\n  return {\n    x,\n    y\n  };\n}\n\n// 处理不同图形的path数据\nexport function handlePathData(shape: Shape, shapeProps: ShapeProps): string {\n  const { x, y, width, height, direction } = shapeProps;\n  let pathData = \"\";\n  if (shape === \"rect\") {\n    pathData = `M${x} ${y} h ${width} v ${height} h -${width} Z`;\n    if (direction === \"right\") {\n      pathData = `M${x} ${y} h -${width} v -${height} h ${width} Z`;\n    }\n  }\n  return pathData;\n}\n","/**\n * @file 圈选器逻辑处理，与视图分离\n * @author perkinJ\n */\n\nimport * as React from 'react';\n\nimport { handlePathData } from './calc';\nimport { Shape, ShapeProps } from './types';\n\nconst { useCallback, useEffect, useState, useRef } = React;\n\nconst initSelectorProps = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  direction: 'left',\n} as ShapeProps;\n\nexport default function useDragSelect(dragSelectContainerRef: any, shape: Shape) {\n  const [shapeProps, setShapeProps] = useState<ShapeProps>(initSelectorProps);\n\n  const [pathData, setPathData] = useState('');\n\n  // 记录mousedown事件的X,Y位置，\n  const mousdownX = useRef(0);\n  const mousdownY = useRef(0);\n\n  const handleMouseMove = useCallback(\n    event => {\n      const newX = event.layerX;\n      const newY = event.layerY;\n      const newWidth = Math.abs(newX - mousdownX.current);\n      const newHeight = Math.abs(newY - mousdownY.current);\n\n      const diffX = newX - mousdownX.current;\n\n      const newShapeProps = {\n        x: mousdownX.current,\n        y: mousdownY.current,\n        width: newWidth,\n        height: newHeight,\n        direction: diffX < 0 ? 'right' : 'left',\n      } as ShapeProps;\n\n      const path = handlePathData(shape, newShapeProps);\n      setPathData(path);\n      setShapeProps(newShapeProps);\n    },\n    [setShapeProps, shape],\n  );\n\n  const handleMouseUp = useCallback(\n    event => {\n      event.stopPropagation();\n\n      // 清空路径\n      setPathData('');\n\n      // 清空初次点击数据\n      mousdownX.current = 0;\n      mousdownY.current = 0;\n      dragSelectContainerRef.current.removeEventListener('mousemove', handleMouseMove);\n    },\n    [dragSelectContainerRef, handleMouseMove],\n  );\n\n  const handleMouseDown = useCallback(\n    event => {\n      event.stopPropagation();\n\n      mousdownX.current = event.layerX;\n      mousdownY.current = event.layerY;\n\n      dragSelectContainerRef.current.addEventListener('mousemove', handleMouseMove);\n      dragSelectContainerRef.current.addEventListener('mouseup', handleMouseUp);\n    },\n    [dragSelectContainerRef, handleMouseMove, handleMouseUp],\n  );\n\n  useEffect(() => {\n    const drag = dragSelectContainerRef.current;\n    drag.addEventListener('mousedown', handleMouseDown);\n    return () => {\n      drag.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, [dragSelectContainerRef, handleMouseDown]);\n\n  // 返回选择器坐标位置以及生成的path数据\n  return { shapeProps, pathData };\n}\n\nexport { ShapeProps };\n","/**\n * @file 圈选器组件\n * @author perkinJ\n */\n\nimport * as React from \"react\";\nimport classNames from \"classnames\";\nimport * as _ from \"lodash\";\nimport useDragSelect, { ShapeProps } from \"../utils/useDragSelect\";\nimport { StyleProps } from \"../utils/types\";\nimport { getHeight, getWidth, getPosition } from \"../utils/calc\";\n\nimport \"./DragSelector.scss\";\n\nconst { useRef, useCallback, useMemo } = React;\n\nclass DragSeletorProps {\n  /** 蒙层的颜色 */\n  overlayColor?: string;\n\n  /** 选择器的样式 */\n  selectorStyle?: StyleProps;\n\n  /** 是否展示 */\n  visible: boolean;\n\n  /** 关闭 */\n  onClose?: (selectProps: ShapeProps) => void;\n\n  /** 挂载在DOM节点下 */\n  getPopupContainer?: () => HTMLElement;\n}\n\nexport default function DragSeletor(props: DragSeletorProps) {\n  const {\n    // width,\n    // height,\n    overlayColor,\n    selectorStyle,\n    visible,\n    onClose,\n    getPopupContainer\n  } = props;\n  const dragSelectContainerRef = useRef(null);\n\n  const { shapeProps, pathData } = useDragSelect(\n    dragSelectContainerRef,\n    \"rect\"\n  );\n\n  const handleClick = useCallback(\n    event => {\n      event.stopPropagation();\n      event.preventDefault();\n      if (onClose) {\n        onClose(shapeProps);\n      }\n    },\n    [onClose, shapeProps]\n  );\n\n  return useMemo(() => {\n    const classes = classNames(\"drag-select-container\", {\n      \"drag-select-hidden\": !visible\n    });\n\n    const popupContainer = getPopupContainer() as HTMLElement;\n    const width = getWidth(popupContainer);\n    const height = getHeight(popupContainer);\n    const position = getPosition(popupContainer) as { x: number; y: number };\n\n    return (\n      <svg\n        ref={dragSelectContainerRef}\n        className={classes}\n        width={width}\n        height={height}\n        style={{\n          background: overlayColor,\n          left: position?.x,\n          top: position?.y\n        }}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        onDrag={event => {\n          event.preventDefault();\n        }}\n        onClick={handleClick}\n      >\n        <g>\n          {/** 可支持多个图形，矩形，圆形，自定义路径等 */}\n          <path d={pathData} style={{ ...selectorStyle }} />\n        </g>\n      </svg>\n    );\n  }, [overlayColor, handleClick, selectorStyle, visible, pathData]);\n}\n\nexport { ShapeProps };\n","import * as React from 'react';\n\nimport './ContextMenu.scss';\n\nclass ContextMenuProps {\n  id?: string;\n  visible: boolean;\n  left: number;\n  top: number;\n  // onHide: () => void;\n  children: any;\n}\nconst ContextMenu: React.FC<ContextMenuProps> = (props: ContextMenuProps) => {\n  const { id, visible, left, top, children } = props;\n  return (\n    <div\n      id={id ? `context-menu-${id}` : 'context-menu'}\n      style={{ display: visible ? 'block' : 'none', left, top }}\n      className=\"contextMenu-layer\">\n      <div className=\"contextMenu\">{children}</div>\n    </div>\n  );\n};\n\nexport { ContextMenu };\n","import { MutableRefObject, useRef, useEffect, useCallback, useMemo } from 'react';\n\n// 鼠标点击事件，click 不会监听右键\nconst defaultEvent = 'click';\n\ntype RefType = HTMLElement | (() => HTMLElement | null) | null;\n\nexport function useClickAway<T extends HTMLElement = HTMLDivElement>(\n  onClickAway: (event: KeyboardEvent) => void,\n  dom?: RefType,\n  eventName: string = defaultEvent,\n): MutableRefObject<T> {\n  const element = useRef<T>();\n\n  const handler = useCallback(\n    event => {\n      const targetElement = typeof dom === 'function' ? dom() : dom;\n      const el = targetElement || element.current;\n      if (!el || el.contains(event.target)) {\n        return;\n      }\n\n      onClickAway(event);\n    },\n    [element.current, onClickAway, dom],\n  );\n\n  useEffect(() => {\n    document.addEventListener(eventName, handler);\n\n    return () => {\n      document.removeEventListener(eventName, handler);\n    };\n  }, [eventName, handler]);\n\n  return element as MutableRefObject<T>;\n}","/**\n * @file 业务组件，基于Node的管道组件卡片\n * @author perkinJ\n */\n\nimport * as React from \"react\";\nimport classNames from \"classnames\";\nimport { Menu } from \"antd\";\nimport { Node as NodeContainer } from \"./components\";\nimport { ContextMenu } from \"./ContextMenu\";\nimport { Node, OperateType } from \"./defines\";\nimport { useClickAway } from \"./hooks/useClickAway\";\nimport \"./EditorNode.scss\";\n\nconst { useState, useRef, useMemo, useCallback } = React;\n\nclass EditorNodeProps {\n  /** 唯一id，用于Contextmenu展示 */\n  id?: string;\n\n  /** 节点信息 */\n  currentNode: Node;\n\n  /** 选择菜单栏 */\n  onSelect?: (currentNode: Node, key: any) => void;\n\n  /** 右键组件 */\n  onContextMenu?: (event: React.MouseEvent<HTMLLIElement>) => void;\n\n  /** 是否属性设置完全 */\n  isCompleted?: boolean;\n\n  /** 是否有错误数据 */\n  hasError?: boolean;\n\n  /** 是否被点击 */\n  isSelected?: boolean;\n\n  /** 是否被拖拽 */\n  isDragged?: boolean;\n\n  /** 点击卡片 */\n  onClick?: (currentNode: Node, event: any) => void;\n\n  /** 是否可交互，区分展示型和交互型 */\n  interactive?: boolean;\n\n  /** 外部容器的缩放情况 */\n  currTrans?: any;\n\n  /** 显示选择器 */\n  showSelector?: boolean;\n\n  /** Node容器的ref */\n  nodeRef: any;\n\n  /** 改变节点大小 */\n  onResize?: (width: number, height: number, x: number, y: number) => void;\n}\n\n/**\n * 获取元素相对于页面的绝对位置\n */\nexport function getOffset(domNode: any) {\n  let offsetTop = 0;\n  let offsetLeft = 0;\n  let targetDomNode = domNode;\n  while (targetDomNode !== window.document.body && targetDomNode != null) {\n    offsetLeft += targetDomNode.offsetLeft;\n    offsetTop += targetDomNode.offsetTop;\n    targetDomNode = targetDomNode.offsetParent;\n  }\n  return {\n    offsetTop,\n    offsetLeft\n  };\n}\n\nexport function EditorNode(props: EditorNodeProps) {\n  const {\n    currentNode,\n    onSelect,\n    hasError,\n    isSelected,\n    isDragged,\n    onClick,\n    interactive = true,\n    currTrans,\n    nodeRef,\n    onResize,\n    showSelector,\n    id\n  } = props;\n  // 组件内状态，与业务无关\n  const [menuShow, setMenuShow] = useState(false);\n  const [menuPos, setMenuPos] = useState({ left: 0, top: 0 });\n\n  useClickAway(\n    () => {\n      setMenuShow(false);\n    },\n    () => document.querySelector(\".editorNode-box-menu\"),\n    \"contextmenu\"\n  );\n\n  const menuRef = useClickAway(() => {\n    setMenuShow(false);\n  });\n\n  const editorNodeRef = useRef(null);\n\n  // const [pos, setPos] = useState(initPos);\n  // 边框颜色\n  let borderColor = \"\";\n  if (isSelected) {\n    borderColor = `selected ${currentNode.key}-clicked ${\n      currentNode.key\n    }-border`;\n  } else {\n    borderColor = `${currentNode.key}-border`;\n  }\n\n  // 是否是圆形\n  const isCircle = currentNode.key === \"circle\";\n\n  // 是否为圆角\n  const isRadius = currentNode.key === 'rectRadius';\n\n  // 是否为菱形\n  const isDiamond = currentNode.key === 'diamond';\n\n  const borderClass = classNames(\n    \"editorNode-box\",\n    borderColor,\n    {\n      dragging: isDragged\n    },\n    { \"editorNode-circle\": isCircle },\n    { \"editorNode-rectRadius\": isRadius},\n  );\n\n  const menuList = [\n    {\n      name: \"删除\",\n      key: OperateType.delete,\n      disabled: false\n    }\n  ];\n\n  const onContextMenu = (\n    position: { left: number; top: number },\n    event: React.MouseEvent<any>\n  ) => {\n    event.stopPropagation();\n    event.preventDefault();\n    // 根据业务场景处理菜单的位置\n    const newPosition = {\n      left: position.left,\n      top: position.top\n    };\n    setMenuPos(newPosition);\n    setMenuShow(true);\n    if (props.onContextMenu) {\n      props.onContextMenu(event);\n    }\n  };\n\n  /** 点击菜单项 */\n  const handleClickMenu = ({ key }) => {\n    onSelect(currentNode, key);\n    setMenuShow(false);\n  };\n\n  /** 点击组件 */\n  const handleClickNode = useCallback(\n    event => {\n      if (interactive && onClick) {\n        onClick(currentNode, event);\n      }\n    },\n    [interactive, onClick, currentNode]\n  );\n\n  return (\n    <NodeContainer\n      id={currentNode.id}\n      x={currentNode.x}\n      y={currentNode.y}\n      width={currentNode.width}\n      height={currentNode.height}\n      currTrans={currTrans}\n      ref={nodeRef}\n      isSelected={isSelected}\n      onClick={handleClickNode}\n      onResize={onResize}\n      onContextMenu={interactive ? onContextMenu : null}\n    >\n      <div className=\"editorNode\" ref={editorNodeRef}>\n        <div className={borderClass} style={ { transform: isDiamond?`rotateZ(45deg) skew(30deg,30deg)`: 'none'}}>\n          <div className=\"editorNode-box-property\">\n            <div className=\"editorNode-name\">{currentNode.name}</div>\n          </div>\n          <div className=\"editorNode-box-menu\" ref={menuRef}>\n            <ContextMenu\n              id={currentNode.id}\n              visible={menuShow}\n              left={menuPos.left}\n              top={menuPos.top}\n            >\n              <Menu\n                getPopupContainer={(triggerNode: any) => triggerNode.parentNode}\n              >\n                {menuList.map(child => {\n                  return (\n                    <Menu.Item key={child.key} onClick={handleClickMenu}>\n                      {child.name}\n                    </Menu.Item>\n                  );\n                })}\n              </Menu>\n            </ContextMenu>\n          </div>\n        </div>\n      </div>\n    </NodeContainer>\n  );\n}\n","/**\n * @file 通用边组件\n * @author perkinJ\n */\n\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport Edge from \"./components/Edge\";\nimport { quadratic, calcLinkPosition } from \"./utils/calc\";\nimport { Node, Link, ACTIVE, LINK, UNLINK } from \"./defines\";\nimport \"./EditorEdges.scss\";\n\nclass EditorEdgesProps {\n  /** 唯一id */\n  id?: string;\n\n  /** 边 */\n  links: Link[];\n\n  /** 节点 */\n  nodes: Node[];\n\n  /** 被点击的连线 */\n  selectedLinks?: string[];\n\n  /** 选择某条线 */\n  onSelectLink?: (\n    key: string,\n    event: React.MouseEvent<SVGPathElement, MouseEvent>\n  ) => void;\n\n  /** 右键某条线 */\n  onContextMenu?: (\n    key: string,\n    event: React.MouseEvent<SVGPathElement, MouseEvent>\n  ) => void;\n\n  /** 是否连线 */\n  isDraggingLink?: boolean;\n\n  /** 拖拽连线属性 */\n  dragLink?: {\n    /** 源起节点id */\n    originId: string;\n    /** 源起节点 */\n    originX: number;\n    originY: number;\n    /** 鼠标移动节点 */\n    x: number;\n    y: number;\n  };\n\n  /** 是否可交互 */\n  interactive?: boolean;\n}\n\nexport function EditorEdges(props: EditorEdgesProps) {\n  const {\n    links,\n    nodes,\n    selectedLinks,\n    onSelectLink,\n    onContextMenu,\n    isDraggingLink,\n    dragLink,\n    interactive = true\n  } = props;\n  const edgesPath = links.map(link => {\n    const { source, target, id, sourcePos, targetPos } = link;\n    const uNode = _.find(nodes, vertex => {\n      return vertex.id === source;\n    });\n    const vNode = _.find(nodes, vertex => {\n      return vertex.id === target;\n    });\n    const { x: sourceX, y: sourceY } = calcLinkPosition(uNode, sourcePos);\n    const { x: targetX, y: targetY } = calcLinkPosition(vNode, targetPos);\n\n    // 自定义路径\n    const pathData = quadratic(\n      {\n        x: sourceX,\n        y: sourceY\n      },\n      {\n        x: targetX,\n        y: targetY\n      }\n    );\n\n    // 连线的中点\n    // const centerX = (uNode.x + NODE_WIDTH + vNode.x) / 2;\n    // const centerY = (uNode.y + NODE_HEIGHT + vNode.y) / 2;\n\n    const isActive = selectedLinks ? selectedLinks.includes(id) : false;\n    const fill = isActive ? ACTIVE : LINK;\n\n    const style = {\n      fill,\n      stroke: fill,\n      strokeWidth: 2\n    };\n\n    return (\n      <Edge\n        key={id}\n        id={id}\n        path={pathData}\n        lineAppendWidth={15}\n        style={style}\n        onContextMenu={interactive ? onContextMenu.bind(null, id) : null}\n        onClick={interactive ? onSelectLink.bind(null, id) : null}\n        endArrow={\n          <marker\n            id={`${id}-endArrow`}\n            markerWidth=\"10\"\n            markerHeight=\"10\"\n            refX=\"0\"\n            refY=\"2\"\n            orient=\"auto\"\n            markerUnits=\"strokeWidth\"\n          >\n            <path d=\"M0,0 L0,4 L4,2 z\" fill={fill} />\n          </marker>\n        }\n        // object={\n        //   (type || _.isBoolean(sendTo)) &&\n        //   !iconDisabled && (\n        //     <foreignObject\n        //       width={LINKICON_WIDTH}\n        //       height=\"60\"\n        //       x={centerX - LINKICON_WIDTH / 2}\n        //       y={centerY - LINKICON_HEIGHT / 2}\n        //     >\n        //       <div className=\"link-icon\">\n\n        //       </div>\n        //     </foreignObject>\n        //   )\n        // }\n      />\n    );\n  });\n\n  const renderDraggingLink = () => {\n    if (isDraggingLink) {\n      const { x, y, originX, originY } = dragLink;\n      const pathData = quadratic(\n        {\n          x: originX,\n          y: originY\n        },\n        {\n          x,\n          y\n        }\n      );\n\n      return (\n        <Edge\n          path={pathData}\n          endArrow={\n            <marker\n              id={`${UNLINK}-endArrow`}\n              markerWidth=\"10\"\n              markerHeight=\"10\"\n              refX=\"0\"\n              refY=\"2\"\n              orient=\"auto\"\n              markerUnits=\"strokeWidth\"\n            >\n              <path d=\"M0,0 L0,4 L4,2 z\" fill={UNLINK} />\n            </marker>\n          }\n          style={{\n            fill: UNLINK,\n            stroke: UNLINK,\n            strokeWidth: 2\n          }}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <svg className=\"editor-view-svg\">\n      {links && edgesPath}\n      {interactive && renderDraggingLink()}\n    </svg>\n  );\n}\n","/**\n * @file 节点，边搜索方法\n * @author perkinJ\n */\n\nimport * as _ from 'lodash';\nimport { Node, Link } from '../defines';\nimport { distance } from './calc';\nimport { Point } from './types';\n/**\n * 查找单个上游组件\n */\nexport const findUpstreamNode = (id: string, nodes: Node[], links: Link[]) => {\n  const selectedLinks = _.find(links, item => item.target === id);\n  if (selectedLinks) {\n    const upstreamComponent = _.find(nodes, item => item.id === selectedLinks.source, null);\n    return upstreamComponent;\n  }\n};\n\n/**\n * 查找单个下游组件\n */\nexport const findDownstreamNode = (id: string, nodes: Node[], links: Link[]) => {\n  const selectedLinks = _.find(links, item => item.source === id);\n  if (selectedLinks) {\n    const downstreamComponent = _.find(nodes, item => item.id === selectedLinks.target, null);\n    return downstreamComponent;\n  }\n};\n\n/** 搜索当前组件的所有的下游组件 */\nexport const findAllDownstreamNodes = (id: string, nodes: Node[], links: Link[]) => {\n  const selectedLinks = _.filter(links, item => item.source === id);\n  if (Array.isArray(selectedLinks) && selectedLinks.length > 0) {\n    const downstreamComponent = selectedLinks.map(link => _.find(nodes, item => item.id === link.target));\n    return downstreamComponent;\n  }\n  return [];\n};\n\n/** 搜索所有的上游组件 */\nexport const findAllUpstreamNodes = (id: string, nodes: Node[], links: Link[]) => {\n  const selectedLinks = _.filter(links, item => item.target === id);\n  if (selectedLinks) {\n    const upstreamComponent = _.filter(nodes, item => item.id === selectedLinks[0].source);\n    return upstreamComponent;\n  }\n  return [];\n};\n\n/** 搜索当前组件的所有上游连线 */\nexport const findAllUptreamLinks = (id: string, links: Link[]) => {\n  const newLinks = _.filter(links, item => item.target === id);\n  return newLinks;\n};\n\n/** 搜索当前组件的所有下游连线 */\nexport const findAllDownstreamLinks = (id: string, links: Link[]) => {\n  const newLinks = _.filter(links, item => item.source === id);\n  return newLinks;\n};\n\n/**\n * @desc 查找靠近某个点最近的节点，用于连线\n * @param point 点的坐标\n * @param nodes 节点\n * @param range 最大范围\n */\nexport const findNearbyNode = (point: Point, nodes: Node[], range: number) => {\n  let targetNode: Node = null;\n  let minDis = Infinity;\n  let targetPos = '';\n\n  nodes.forEach(v => {\n    // 1. 比较4个点离初始点最近的点\n    let minDistance = Infinity;\n    ['left', 'right', 'top', 'bottom'].forEach(item => {\n      let targetX;\n      let targetY;\n      if (item === 'left') {\n        targetX = v.x;\n        targetY = v.y + v.height / 2;\n      } else if (item === 'right') {\n        targetX = v.x + v.width;\n        targetY = v.y + v.height / 2;\n      } else if (item === 'top') {\n        targetX = v.x + v.width / 2;\n        targetY = v.y;\n      } else if (item === 'bottom') {\n        targetX = v.x + v.width / 2;\n        targetY = v.y + v.height;\n      }\n\n      minDistance = distance(\n        {\n          x: point.x,\n          y: point.y\n        },\n        {\n          x: targetX,\n          y: targetY\n        }\n      );\n\n      if (minDis > minDistance) {\n        minDis = minDistance;\n        targetNode = v;\n        targetPos = item;\n      }\n    });\n  });\n\n  if (minDis <= range) {\n    return { targetNode, targetPos };\n  }\n  return null;\n};\n","/**\n * @file demo公共方法\n * @author perkinJ\n */\n\n/**\n * 全屏某一个元素\n * @param element\n */\nfunction launchFullscreen(element: any) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  }\n}\n/**\n * 退出全屏\n */\nfunction exitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if ((document as any).webkitExitFullscreen) {\n    (document as any).webkitExitFullscreen();\n  }\n}\n\n/**\n * 判断是否处于全屏状态\n */\nfunction isFull() {\n  const doc = document as any;\n  return doc.fullscreenElement || doc.webkitFullscreenElement;\n}\n\n/**\n * 获取元素相对于页面的绝对位置\n */\nfunction getOffset(domNode: any) {\n  let offsetTop = 0;\n  let offsetLeft = 0;\n  let targetDomNode = domNode;\n  while (targetDomNode !== window.document.body && targetDomNode != null) {\n    offsetLeft = offsetLeft + targetDomNode.offsetLeft;\n    offsetTop = offsetTop + targetDomNode.offsetTop;\n    targetDomNode = targetDomNode.offsetParent;\n  }\n  return {\n    offsetTop,\n    offsetLeft\n  };\n}\n\nexport { launchFullscreen, exitFullscreen, isFull, getOffset };\n","/**\n * @file 处理画布内的操作\n */\n\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport * as uuid from \"uuid\";\nimport { ReScreen, Utils } from \"regraph-next\";\nimport { ZoomTransform, zoomIdentity } from \"d3-zoom\";\nimport { Menu } from \"antd\";\nimport { EditorNode } from \"./EditorNode\";\nimport { EditorEdges } from \"./EditorEdges\";\nimport { ContextMenu } from \"./ContextMenu\";\nimport {\n  MenuPos,\n  CONNECTOR,\n  OperateType,\n  Link,\n  Node,\n  NODE_WIDTH,\n  NODE_HEIGHT,\n  LINK_AREA\n} from \"./defines\";\nimport {\n  findUpstreamNode,\n  findAllUpstreamNodes,\n  findDownstreamNode,\n  findAllDownstreamNodes,\n  findAllDownstreamLinks,\n  findNearbyNode\n} from \"./utils/find\";\nimport { calcLinkPosition } from \"./utils/calc\";\nimport { exitFullscreen, launchFullscreen, isFull, getOffset } from \"../utils\";\n\nconst { Point } = Utils;\n\nclass CanvasContentProps {\n  ref: any;\n  nodes: Node[];\n  links: Link[];\n  setNodes: (nodes: Node[]) => void;\n  setLinks: (links: Link[]) => void;\n  selectedLinks: string[];\n  setSelectedLinks: (links: string[]) => void;\n  selectedNodes: string[];\n  setSelectedNodes: (links: string[]) => void;\n  /** 当前拖拽的节点 */\n  dragNode: Node;\n  updateNodes: (node: Node) => void;\n  updateLinks: (link: Link) => void;\n  deleteNodes: (selectedNodes: string[]) => void;\n  deleteLinks: (selectedLinks: string[]) => void;\n  copiedNodes: Node[];\n  setCopiedNodes: (nodes: Node[]) => void;\n  currTrans: ZoomTransform;\n  setCurrTrans:(transform: ZoomTransform) => void;\n}\n\nclass CanvasContentState {\n  /** 拖拽节点 */\n  isDraggingNode: boolean;\n  /** 拖拽边 */\n  isDraggingLink: boolean;\n  /** 拖拽节点 */\n  dragNode: Node;\n  /** 鼠标位置在拖动节点的偏移量 */\n  dragNodeOffset: any;\n  /** 移动边 */\n  dragLink: {\n    /** 源起节点id */\n    originId: string;\n    /** 源起节点 */\n    originX: number;\n    originY: number;\n    /** 鼠标移动节点 */\n    x: number;\n    y: number;\n    /** 来源边位置 */\n  };\n  sourcePos: string;\n  /** 对话框展示标志位 */\n  menuDisplay: boolean;\n  /** 对话框的位置信息 */\n  menuPos: MenuPos;\n  /** 画布的放大倍率 */\n  screenScale: number;\n  isKeyPressing: boolean;\n  /** 当前鼠标悬浮的节点 */\n  currentHoverNode: string;\n  /** 删除框 */\n  deleteVisible: boolean;\n}\n\nexport default class CanvasContent extends React.Component<\n  CanvasContentProps,\n  CanvasContentState\n> {\n  nodesContainerRef: any;\n  container: any;\n  screenWidth: number;\n  screenHeight: number;\n\n  autoVerticalScroller: any = null;\n  autoHorizontalScroller: any = null;\n\n  handleResize: (isLarge: boolean) => void;\n  handleAdapt: () => void;\n  handleResizeTo: (scale: number, P0?: [number, number]) => void;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDraggingNode: false,\n      isDraggingLink: false,\n      isKeyPressing: false,\n      dragNode: null,\n      dragLink: null,\n      dragNodeOffset: null,\n      menuDisplay: false,\n      menuPos: {\n        id: \"\",\n        x: 0,\n        y: 0\n      },\n      screenScale: 100,\n      sourcePos: \"\",\n      currentHoverNode: \"\",\n      deleteVisible: false\n    };\n    this.nodesContainerRef = React.createRef();\n    this.container = React.createRef();\n    // this.props.currTrans = zoomIdentity;\n\n  }\n\n  componentDidMount() {\n    this.nodesContainerRef.current.addEventListener(\n      \"mousedown\",\n      this.onNodesContainerMouseDown\n    );\n    this.container.current.addEventListener(\n      \"contextmenu\",\n      this.openContainerMenu\n    );\n    this.container.current.addEventListener(\"click\", this.onContainerMouseDown);\n  }\n\n  componentWillUnmount() {\n    this.nodesContainerRef.current.removeEventListener(\n      \"mousedown\",\n      this.onNodesContainerMouseDown\n    );\n    this.container.current.removeEventListener(\n      \"contextmenu\",\n      this.openContainerMenu\n    );\n    this.container.current.removeEventListener(\n      \"click\",\n      this.onContainerMouseDown\n    );\n  }\n\n  componentWillUpdate(\n    nextProps: CanvasContentProps,\n    nextState: CanvasContentState\n  ) {\n    if (this.state.isDraggingNode !== nextState.isDraggingNode) {\n      this.toggleDragNode(nextState.isDraggingNode);\n    }\n    if (this.state.isDraggingLink !== nextState.isDraggingLink) {\n      this.toggleDragLink(nextState.isDraggingLink);\n    }\n  }\n\n  /** 打开全局操作菜单，包括复制，粘贴，删除等 */\n  openContainerMenu = (event: any) => {\n    event.preventDefault();\n  };\n\n  toggleDragNode = (isDraggingNode: Boolean) => {\n    if (isDraggingNode) {\n      window.addEventListener(\"mousemove\", this.onDragNodeMouseMove);\n      window.addEventListener(\"mouseup\", this.onDragNodeMouseUp);\n    } else {\n      window.removeEventListener(\"mousemove\", this.onDragNodeMouseMove);\n      window.removeEventListener(\"mouseup\", this.onDragNodeMouseUp);\n    }\n  };\n\n  toggleDragLink = (isDraggingLink: Boolean) => {\n    if (isDraggingLink) {\n      window.addEventListener(\"mousemove\", this.onDragLinkMouseMove);\n      window.addEventListener(\"mouseup\", this.onDragLinkMouseUp);\n    } else {\n      window.removeEventListener(\"mousemove\", this.onDragLinkMouseMove);\n      window.removeEventListener(\"mouseup\", this.onDragLinkMouseUp);\n    }\n  };\n\n  onDragLinkMouseMove = (event: any) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n    const screenX = event.clientX - offsetLeft;\n    const screenY = event.clientY - offsetTop;\n\n    const { k, x, y } = this.props.currTrans;\n\n    this.setState(preState => {\n      const { dragLink } = preState;\n      return {\n        dragLink: {\n          ...dragLink,\n          x: (screenX - x) / k,\n          y: (screenY - y) / k\n        }\n      };\n    });\n  };\n\n  /** 监听整个区域，提升性能 */\n  onNodesContainerMouseDown = (event: any) => {\n    event.stopPropagation();\n    const { nodes } = this.props;\n    if (nodes && nodes.length > 0) {\n      const component = _.find(nodes, c => {\n        if (c.ref && c.ref.current) {\n          return c.ref.current.contains(event.target);\n        }\n        return false;\n      });\n\n      const type = event.target.dataset && event.target.dataset.type;\n      const position = event.target.dataset && event.target.dataset.position;\n\n      if (component) {\n        if (type === \"edge\" && position) {\n          /** 拖拽连线 */\n          this.onDragLinkMouseDown(component as any, position);\n          return;\n        } else if (type === \"resize\") {\n          return;\n        } else {\n          /** 拖拽节点，排除resize节点 */\n          this.onDragNodeMouseDown(component as any, event);\n        }\n      }\n    }\n  };\n\n  /** 监听整个容器click事件 */\n  onContainerMouseDown = (event: any) => {\n    // event.stopPropagation();\n\n    // 过滤掉节点和边\n    const path = event.path;\n    const isNodeOrLink = this.hasNodeOrLink(path, \"editor-node\", \"editor-link\");\n    if (!isNodeOrLink) {\n      // 清空高亮的节点和边\n      this.handleClearActive();\n    }\n  };\n\n  /** 监听整个容器mousemove 事件 */\n  onNodesContainerMouseMove = (event: any) => {\n    event.preventDefault();\n    const path = event.path;\n    const isNodeOrLink = this.hasNodeOrLink(path, \"editor-node\", \"editor-link\");\n    const { nodes } = this.props;\n\n    if (nodes && nodes.length > 0) {\n      const currentNode = _.find(nodes, c => {\n        if (c.ref && c.ref.current) {\n          return c.ref.current.contains(event.target);\n        }\n        return false;\n      }) as Node;\n\n      if (currentNode) {\n        if (isNodeOrLink) {\n          this.setState({\n            currentHoverNode: currentNode.id\n          });\n        } else {\n          this.setState({\n            currentHoverNode: \"\"\n          });\n        }\n      }\n    }\n  };\n\n  /** 按下节点 */\n  onDragNodeMouseDown = (node: Node, event: any) => {\n    const { k, x, y } = this.props.currTrans;\n\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n    const screenX = event.clientX - offsetLeft;\n    const screenY = event.clientY - offsetTop;\n\n    this.setState(preState => {\n      // 计算鼠标位置在节点中的偏移量\n      return {\n        isDraggingNode: true,\n        dragNode: node,\n        dragNodeOffset: {\n          x: (screenX - x) / k - node.x,\n          y: (screenY - y) / k - node.y\n        }\n      };\n    });\n  };\n\n  /** 鼠标按下，进行连线 */\n  onDragLinkMouseDown = (node: Node, position: string) => {\n    const { x, y } = calcLinkPosition(node, position);\n    this.setState({\n      isDraggingLink: true,\n      dragLink: {\n        originId: node.id,\n        originX: x,\n        originY: y,\n        x,\n        y\n      },\n      sourcePos: position\n    });\n  };\n\n  /** 鼠标抬起，连线结束 */\n  onDragLinkMouseUp = (event: any) => {\n    const { setLinks, links, nodes } = this.props;\n    const { dragLink } = this.state;\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n    const screenX = event.clientX - offsetLeft;\n    const screenY = event.clientY - offsetTop;\n\n    const { k, x, y } = this.props.currTrans;\n\n    const nearNode = findNearbyNode(\n      {\n        x: (screenX - x) / k,\n        y: (screenY - y) / k\n      },\n      nodes,\n      LINK_AREA\n    );\n\n    // 需要找到链接的是哪个节点\n\n    if (nearNode) {\n      const { targetNode, targetPos } = nearNode;\n      const newLink = {\n        id:\n          dragLink.originId + CONNECTOR + targetNode.id + CONNECTOR + targetPos,\n        source: dragLink.originId,\n        target: targetNode.id,\n        sourcePos: this.state.sourcePos,\n        targetPos\n      };\n      setLinks([...links, newLink]);\n    }\n\n    this.setState({\n      isDraggingLink: false,\n      dragLink: null,\n      sourcePos: \"\"\n    });\n  };\n\n  /** 移动节点 */\n  onDragNodeMouseMove = (event: any) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const { setNodes, nodes } = this.props;\n\n    const { k, x, y } = this.props.currTrans;\n\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n    const screenX = event.clientX - offsetLeft;\n    const screenY = event.clientY - offsetTop;\n\n    // 判断当前节点平移后是否溢出画布\n    // const isOver = this.checkNodeIsOverScreen(dragNode, screenX, screenY);\n\n    // if (!isOver) {\n    this.setState(preState => {\n      const { dragNode, dragNodeOffset } = preState;\n\n      const newX = (screenX - x) / k - dragNodeOffset.x;\n      const newY = (screenY - y) / k - dragNodeOffset.y;\n\n      return {\n        ...preState,\n        dragNode: {\n          ...dragNode,\n          x: newX,\n          y: newY\n        }\n      };\n    });\n\n    const { dragNodeOffset, dragNode } = this.state;\n\n    setNodes(\n      nodes.map(c => {\n        return c.id === dragNode.id\n          ? {\n              ...c,\n              x: (screenX - x) / k - dragNodeOffset.x,\n              y: (screenY - y) / k - dragNodeOffset.y\n            }\n          : c;\n      })\n    );\n  };\n\n  /** 放开节点 */\n  onDragNodeMouseUp = (event: any) => {\n    event.stopPropagation();\n    // this.moveStop(true);\n    // this.moveStop(false);\n\n    this.setState(preState => {\n      const { dragNode } = preState;\n\n      return {\n        ...preState\n      };\n    });\n    this.setState({\n      isDraggingNode: false\n    });\n  };\n\n  getTransformInfo = (currTrans: ZoomTransform) => {\n    this.props.setCurrTrans(currTrans);\n  };\n\n  getScreenHandler = handleMap => {\n    // this.handleApplyTransform = handleMap.handleApplyTransform;\n    this.handleResize = handleMap.handleResize;\n    this.handleResizeTo = handleMap.handleResizeTo;\n    this.handleAdapt = handleMap.handleAdapt;\n    this.screenWidth = handleMap.screenWidth;\n    this.screenHeight = handleMap.screenHeight;\n  };\n\n  onDrag(event, name: string) {}\n\n  onDrop(event: React.DragEvent<HTMLDivElement>) {\n    const { setNodes, nodes, dragNode } = this.props;\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n    const screenX = event.clientX - offsetLeft;\n    const screenY = event.clientY - offsetTop;\n\n    const { k, x, y } = this.props.currTrans;\n\n    if (dragNode) {\n      const { key, name, type, width, height } = dragNode;\n\n      const newNode = {\n        key,\n        name,\n        type,\n        width,\n        height,\n        x: (screenX - x) / k - NODE_WIDTH / 2,\n        y: (screenY - y) / k - NODE_HEIGHT / 2,\n        id: uuid.v4(),\n        ref: React.createRef()\n      };\n\n      setNodes([...nodes, newNode]);\n    }\n  }\n\n\n  /** 清空高亮组件和连线 */\n  handleClearActive = () => {\n    this.props.setSelectedLinks([]);\n    this.props.setSelectedNodes([]);\n  };\n\n  /** 判断点击的节点是否为节点和边 */\n  hasNodeOrLink = (array: any[], node?: string, link?: string) => {\n    let isNodeOrLink = false;\n\n    for (let i = 0; i < array.length; i++) {\n      const inNode = _.includes(array[i].classList, node);\n      const inLink = _.includes(array[i].classList, link);\n\n      if (inNode || inLink) {\n        isNodeOrLink = true;\n        break;\n      }\n    }\n    return isNodeOrLink;\n  };\n\n  /** 改变缩放倍率 */\n  changeScreenScale = (screenScale: number) => {\n    this.setState({\n      screenScale\n    });\n  };\n\n  /** 处理全屏事件 */\n  handleFullScreen = () => {\n    const fullScreen = isFull();\n    if (fullScreen) {\n      exitFullscreen();\n    } else {\n      launchFullscreen(this.container.current);\n    }\n  };\n\n  renderDragSource() {\n    const dragSourceList = [\"组件1\", \"组件2\"];\n\n    return (\n      <div className=\"flow-drag-source\">\n        {dragSourceList.map((name, index) => {\n          return (\n            <div\n              className=\"flow-drag-source-item\"\n              key={index}\n              draggable\n              onDrag={event => this.onDrag(event, name)}\n            >\n              {name}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  /** 点击连线 */\n  onSelectLink = (key: string) => {\n    const { selectedLinks, setSelectedLinks } = this.props;\n    if (selectedLinks) {\n      // 若连线已高线，则取消高亮状态\n      const index = _.findIndex(selectedLinks, link => link === key);\n      if (index > -1) {\n        setSelectedLinks([\n          ...selectedLinks.slice(0, index),\n          ...selectedLinks.slice(index + 1)\n        ]);\n      } else {\n        setSelectedLinks([...selectedLinks, key]);\n      }\n    } else {\n      setSelectedLinks([key]);\n    }\n  };\n\n  /** 点击节点 */\n  onClickNode = (currentNode: Node) => {\n    const { selectedNodes, setSelectedNodes } = this.props;\n    const { isKeyPressing } = this.state;\n    // 区分多选按钮是否按下\n    if (isKeyPressing) {\n      if (selectedNodes) {\n        // 若节点已被点击则清除点击状态\n        const index = _.findIndex(selectedNodes, id => id === currentNode.id);\n        if (index > -1) {\n          setSelectedNodes([\n            ...selectedNodes.slice(0, index),\n            ...selectedNodes.slice(index + 1)\n          ]);\n        } else {\n          setSelectedNodes(_.compact([...selectedNodes, currentNode.id]));\n        }\n      } else {\n        setSelectedNodes([currentNode.id]);\n      }\n    } else {\n      this.props.setSelectedNodes([currentNode.id]);\n      // 清空高亮的连线\n      this.props.setSelectedLinks(null);\n    }\n  };\n\n  /** 被连线的节点 */\n  onSelectNode = (currentNode: Node, key: OperateType) => {\n    const { selectedNodes, deleteNodes } = this.props;\n    if (key === OperateType.delete) {\n      // 删除组件以及删除连线\n      // 判断改节点是否在多选区域内\n      if (selectedNodes && selectedNodes.includes(currentNode.id)) {\n        deleteNodes(_.compact([...selectedNodes, currentNode.id]));\n      } else {\n        deleteNodes([currentNode.id]);\n      }\n    }\n  };\n\n  /** 右键连线 */\n  onContextMenuLink = (\n    key: string,\n    event: React.MouseEvent<SVGPathElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    event.stopPropagation();\n    this.props.setSelectedLinks([key]);\n    // 清空高亮的组件\n    this.props.setSelectedNodes(null);\n\n    const currentPos = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    this.setState({\n      deleteVisible: true,\n      menuPos: currentPos\n    });\n  };\n\n  /** 伸缩节点 */\n  onResize = (\n    node: Node,\n    width: number,\n    height: number,\n    x: number,\n    y: number\n  ) => {\n    const { updateNodes } = this.props;\n    const newNode = {\n      ...node,\n      width,\n      height,\n      x,\n      y\n    };\n    updateNodes(newNode);\n  };\n\n  renderCanvas = () => {\n    const { currentHoverNode } = this.state;\n    const { nodes, links, selectedNodes, selectedLinks } = this.props;\n    return (\n      <div className=\"editor-view\">\n        <div className=\"editor-view-content\" ref={this.nodesContainerRef}>\n          {nodes.map(child => {\n            const id = child.id;\n            const isSelected = selectedNodes\n              ? selectedNodes.includes(id)\n              : false;\n            const showSelector = isSelected || currentHoverNode === id;\n            return (\n              <EditorNode\n                nodeRef={child.ref}\n                currentNode={child}\n                key={id}\n                onClick={this.onClickNode}\n                isSelected={isSelected}\n                showSelector={showSelector}\n                onResize={this.onResize.bind(this, child)}\n                currTrans={this.props.currTrans}\n                onSelect={this.onSelectNode}\n              />\n            );\n          })}\n          <EditorEdges\n            links={links}\n            nodes={nodes}\n            selectedLinks={selectedLinks}\n            onContextMenu={this.onContextMenuLink}\n            onSelectLink={this.onSelectLink}\n            isDraggingLink={this.state.isDraggingLink}\n            dragLink={this.state.dragLink}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { deleteVisible, menuPos } = this.state;\n    return (\n      <div className=\"canvas-container-content\" ref={this.container}>\n        <ReScreen\n          type=\"DOM\"\n          getScreenHandler={this.getScreenHandler}\n          needMinimap={true}\n          needRefresh={true}\n          zoomEnabled={false}\n          mapPosition=\"RT-IN\"\n          mapWidth={200}\n          mapHeight={300}\n          mapRectStyle={{\n            stroke: '#468CFF',\n            fill: 'transparent',\n            strokeWidth: 1.5\n          }}\n          focusEnabled={2}\n          onScreenChange={this.getTransformInfo}\n          onDragOver={event => {\n            event.preventDefault();\n          }}\n          onDrop={this.onDrop.bind(this)}\n        >\n          {this.renderCanvas()}\n        </ReScreen>\n        {/** 删除连线的菜单 */}\n        <ContextMenu\n          visible={deleteVisible}\n          // onHide={() => {\n          //   this.props.setLinks(null);\n          //   this.setState({\n          //     deleteVisible: false\n          //   });\n          // }}\n          left={menuPos.x}\n          top={menuPos.y}\n          // onClick={this.handleDeleteLinks.bind(this, selectedLinks)}\n        >\n          <Menu\n            getPopupContainer={(triggerNode: any) => triggerNode.parentNode}\n          >\n            {[\n              {\n                name: \"删除\",\n                key: OperateType.delete\n              }\n            ].map(child => {\n              return <Menu.Item key={child.key}>{child.name}</Menu.Item>;\n            })}\n          </Menu>\n        </ContextMenu>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { Node, Link } from \"../defines\";\nimport { ZoomTransform, zoomIdentity } from \"d3-zoom\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n\nconst { useState, useEffect } = React;\n\nexport function useEditorStore() {\n  const [editorData, setEditorData] = useState();\n  const [nodes, setNodes] = useState<Node[]>([]);\n  const [links, setLinks] = useState<Link[]>([]);\n  const [selectedLinks, setSelectedLinks] = useState<string[]>([]);\n  const [selectedNodes, setSelectedNodes] = useState<string[]>([]);\n  const [editorLocalData, setEditorLocalData] = useLocalStorage(\"editorData\", {\n    id: \"editorData-test\"\n  });\n  const [dragNode, setDragNode] = useState(null);\n\n  const [currTrans, setCurrTrans] = useState<ZoomTransform>(zoomIdentity);\n\n  const [copiedNodes, setCopiedNodes] = useState<Node[]>([]);\n\n  useEffect(() => {\n    setEditorData(editorLocalData);\n\n    const newNodes = (editorLocalData?.nodes ?? []).map(item => {\n      return {\n        ...item,\n        ref: React.createRef()\n      };\n    });\n    setNodes(newNodes);\n    setLinks(editorLocalData?.links ?? []);\n  }, [editorLocalData]);\n\n  const updateNodes = (node: Node) => {\n    const index = nodes.findIndex(item => item.id === node.id);\n\n    const newNodes = [\n      ...nodes.slice(0, index),\n      node,\n      ...nodes.slice(index + 1)\n    ];\n\n    setNodes(newNodes);\n  };\n\n  const updateLinks = (link: Link) => {\n    const index = links.findIndex(item => item.id === link.id);\n    const newLinks = [\n      ...links.slice(0, index),\n      link,\n      ...links.slice(index + 1)\n    ];\n\n    setLinks(newLinks);\n  };\n\n  const handleSaveData = async () => {\n    const newNodes = nodes ?? [];\n    newNodes.forEach(node => delete node.ref);\n    const result = await setEditorLocalData({ ...editorData, nodes: newNodes, links });\n    return result\n  };\n\n  return {\n    editorData,\n    setEditorData,\n    nodes,\n    setNodes,\n    links,\n    setLinks,\n    updateNodes,\n    updateLinks,\n    selectedLinks,\n    setSelectedLinks,\n    selectedNodes,\n    setSelectedNodes,\n    dragNode,\n    setDragNode,\n    copiedNodes,\n    setCopiedNodes,\n    currTrans,\n    setCurrTrans,\n    editorLocalData,\n    setEditorLocalData,\n    handleSaveData\n  };\n}\n","/** \n * 本地持久化存储\n */\n\nimport {useState} from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  const setValue = async value => new Promise<boolean>(resolve => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      return resolve(true)\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n      return resolve(false);\n    }\n  });\n\n  return [storedValue, setValue];\n}","import { useEffect, useCallback, useRef, RefObject } from 'react';\n\nexport type KeyPredicate = (event: KeyboardEvent) => boolean;\nexport type keyType = KeyboardEvent['keyCode'] | KeyboardEvent['key'];\nexport type KeyFilter = keyType | Array<keyType> | ((event: KeyboardEvent) => boolean);\nexport type EventHandler = (event: KeyboardEvent) => void;\nexport type keyEvent = 'keydown' | 'keyup';\nexport type RefType = HTMLElement | (() => HTMLElement | null);\nexport type EventOption = {\n  events?: Array<keyEvent>;\n  target?: Window | RefType;\n};\n\n// 键盘事件 keyCode 别名\nconst aliasKeyCodeMap: any = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  delete: [8, 46]\n};\n\n// 键盘事件 key 别名\nconst aliasKeyMap: any = {\n  esc: 'Escape',\n  tab: 'Tab',\n  enter: 'Enter',\n  space: ' ',\n  // IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  delete: ['Backspace', 'Delete']\n};\n\n// 修饰键\nconst modifierKey: any = {\n  ctrl: (event: KeyboardEvent) => event.ctrlKey,\n  shift: (event: KeyboardEvent) => event.shiftKey,\n  alt: (event: KeyboardEvent) => event.altKey,\n  meta: (event: KeyboardEvent) => event.metaKey\n};\n\n// 返回空对象\nconst noop = () => {};\n\n/**\n * 判断对象类型\n * @param [obj: any] 参数对象\n * @returns String\n */\nfunction isType(obj: any) {\n  return Object.prototype.toString\n    .call(obj)\n    .replace(/^\\[object (.+)\\]$/, '$1')\n    .toLowerCase();\n}\n\n/**\n * 判断按键是否激活\n * @param [event: KeyboardEvent]键盘事件\n * @param [keyFilter: any] 当前键\n * @returns Boolean\n */\nfunction genFilterKey(event: any, keyFilter: any) {\n  const type = isType(keyFilter);\n  // 数字类型直接匹配事件的 keyCode\n  if (type === 'number') {\n    return event.keyCode === keyFilter;\n  }\n  // 字符串依次判断是否有组合键\n  const genArr = keyFilter.split('.');\n  let genLen = 0;\n  for (const key of genArr) {\n    // 组合键\n    const genModifier = modifierKey[key];\n    // key 别名\n    const aliasKey = aliasKeyMap[key];\n    // keyCode 别名\n    const aliasKeyCode = aliasKeyCodeMap[key];\n    /**\n     * 满足以上规则\n     * 1. 自定义组合键别名\n     * 2. 自定义 key 别名\n     * 3. 自定义 keyCode 别名\n     * 4. 匹配 key 或 keyCode\n     */\n    if (\n      (genModifier && genModifier(event)) ||\n      (aliasKey && isType(aliasKey) === 'array' ? aliasKey.includes(event.key) : aliasKey === event.key) ||\n      (aliasKeyCode && isType(aliasKeyCode) === 'array'\n        ? aliasKeyCode.includes(event.keyCode)\n        : aliasKeyCode === event.keyCode) ||\n      event.key.toUpperCase() === key.toUpperCase()\n    ) {\n      genLen++;\n    }\n  }\n  return genLen === genArr.length;\n}\n\n/**\n * 键盘输入预处理方法\n * @param [keyFilter: any] 当前键\n * @returns () => Boolean\n */\nfunction genKeyFormater(keyFilter: any): KeyPredicate {\n  const type = isType(keyFilter);\n  if (type === 'function') {\n    return keyFilter;\n  }\n  if (type === 'string' || type === 'number') {\n    return (event: KeyboardEvent) => genFilterKey(event, keyFilter);\n  }\n  if (type === 'array') {\n    return (event: KeyboardEvent) => keyFilter.some((item: any) => genFilterKey(event, item));\n  }\n  return keyFilter ? () => true : () => false;\n}\n\nconst defaultEvents: Array<keyEvent> = ['keydown'];\n\nfunction useKeyPress<T extends HTMLElement = HTMLInputElement>(\n  keyFilter: KeyFilter,\n  eventHandler: EventHandler = noop,\n  option: EventOption = {}\n): RefObject<T> {\n  const { events = defaultEvents, target } = option;\n  const element = useRef<T>();\n  const callbackRef = useRef(eventHandler);\n  callbackRef.current = eventHandler;\n\n  const callbackHandler = useCallback(\n    event => {\n      const genGuard: KeyPredicate = genKeyFormater(keyFilter);\n      if (genGuard(event)) {\n        return callbackRef.current(event);\n      }\n    },\n    [keyFilter]\n  );\n\n  useEffect(() => {\n    const targetElement = typeof target === 'function' ? target() : target;\n    const el = element.current || targetElement || window;\n    for (const eventName of events) {\n      el.addEventListener(eventName, callbackHandler);\n    }\n    return () => {\n      for (const eventName of events) {\n        el.removeEventListener(eventName, callbackHandler);\n      }\n    };\n  }, [events, callbackHandler, target]);\n\n  return element as RefObject<T>;\n}\n\nexport { useKeyPress };\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport * as uuid from \"uuid\";\nimport { notification } from \"antd\";\nimport { Toolbar, NodePanel, DragSelector } from \"./components\";\nimport CanvasContent from \"./CanvasContent\";\nimport { useEditorStore } from \"./hooks/useEditorStore\";\nimport { useKeyPress } from \"./hooks/useKeyPress\";\nimport { ShapeProps } from \"./utils/useDragSelect\";\nimport { pointInPoly } from \"./utils/layout\";\n\nimport \"./index.scss\";\n\nconst { useState, useRef, useEffect } = React;\n\nexport default function EditorDemo(props) {\n  const [screenScale, changeScreenScale] = useState(100);\n  const [dragSelectable, setDragSelectable] = useState(false);\n  const {\n    nodes,\n    links,\n    setNodes,\n    setLinks,\n    selectedLinks,\n    setSelectedLinks,\n    dragNode,\n    setDragNode,\n    selectedNodes,\n    setSelectedNodes,\n    updateNodes,\n    updateLinks,\n    copiedNodes,\n    setCopiedNodes,\n    currTrans,\n    setCurrTrans,\n    handleSaveData\n  } = useEditorStore();\n\n  // 画布容器\n  const screenRef = useRef(null);\n\n  // 画布 ref\n  const canvasRef = useRef({\n    getWrappedInstance: () => Object\n  } as any);\n\n  const canvasInstance = canvasRef.current;\n\n  /** 删除组件 */\n  const handleDeleteNodes = (ids: string[]) => {\n    if (!ids) {\n      return;\n    }\n    // 删除与组件相连的连线，不论上游或下游\n\n    const newLinks = _.cloneDeep(links);\n    ids.forEach(id => {\n      // 删除与节点连接的任意边\n      _.remove(newLinks, link => link.source === id || link.target === id);\n    });\n    // 更新连线\n    setLinks(newLinks);\n\n    // 剔除components\n    const cloneNodes = _.cloneDeep(nodes);\n    const newNodes = _.remove(cloneNodes, item => !ids.includes(item.id));\n\n    setNodes(newNodes);\n\n    // 清空高亮状态\n    setSelectedLinks([]);\n    setSelectedNodes([]);\n  };\n\n  /** 删除连线 */\n  const handleDeleteLinks = (activeLinks: string[]) => {\n    if (!activeLinks) {\n      return;\n    }\n    const linkList = links.map(link => link.id);\n    const diffLinks = _.difference(linkList, activeLinks);\n    const newLinks = diffLinks\n      ? diffLinks.map(link => _.find(links, item => item.id === link))\n      : [];\n    setLinks(newLinks);\n  };\n\n  /** 复制节点 */\n  const handleNodesCopy = (ids: string[]) => {\n    const newCopiedNodes = ids.map(id => {\n      return _.find(nodes, item => item.id === id);\n    });\n\n    setCopiedNodes(newCopiedNodes);\n  };\n\n  /** 粘贴节点 */\n  const handleNodesPaste = () => {\n    if (copiedNodes) {\n      const currentCopied = copiedNodes.map(node => {\n        return {\n          ...node,\n          id: uuid.v4(),\n          /**  @todo 后续可优化布局算法 */\n          x: node.x + node.width + 20,\n          ref: React.createRef()\n        };\n      });\n      setCopiedNodes(currentCopied);\n      setNodes([...nodes, ...currentCopied]);\n    }\n  };\n\n  // 剪切\n  const handleShear = () => {\n    if (selectedNodes) {\n      handleNodesCopy(selectedNodes);\n      handleDeleteNodes(selectedNodes);\n    }\n  };\n\n  // 复制\n  const handleCopy = () => {\n    if (selectedNodes) {\n      handleNodesCopy(selectedNodes);\n    }\n  };\n\n  // 粘贴\n  const handlePaste = () => {\n    if (copiedNodes) {\n      handleNodesPaste();\n    }\n  };\n\n  // 删除\n  const handleDelete = () => {\n    if (selectedNodes) {\n      handleDeleteNodes(selectedNodes);\n    }\n    if (selectedLinks) {\n      handleDeleteLinks(selectedLinks);\n    }\n  };\n\n  // 圈选\n  const handleDragSelect = () => {\n    setDragSelectable(!dragSelectable);\n  };\n\n  /** 处理DragSelector 关闭事件 */\n  const onDragSelectorClose = (selectorProps: ShapeProps) => {\n    // 计算区域内的位置有多少节点需要高亮,其实计算的是一个点是否在矩形内\n\n    // 1. 计算每个节点的中心\n    // 多边形的位置信息要与画布同步\n    const { k, x, y } = currTrans;\n\n    const points = nodes.map(node => {\n      return {\n        x: k * node.x + x + (node.width / 2) * k,\n        y: k * node.y + y + (node.height / 2) * k,\n        id: node.id\n      };\n    });\n\n    // 2. 多边形各个点转化为数组，暂时为矩形，后面考虑其他形状\n    let poly = [];\n    if (selectorProps.direction === \"left\") {\n      poly = [\n        { x: selectorProps.x, y: selectorProps.y },\n        { x: selectorProps.x + selectorProps.width, y: selectorProps.y },\n        {\n          x: selectorProps.x + selectorProps.width,\n          y: selectorProps.y + selectorProps.height\n        },\n        { x: selectorProps.x, y: selectorProps.y + selectorProps.height }\n      ];\n    } else {\n      poly = [\n        { x: selectorProps.x, y: selectorProps.y },\n        { x: selectorProps.x - selectorProps.width, y: selectorProps.y },\n        {\n          x: selectorProps.x - selectorProps.width,\n          y: selectorProps.y - selectorProps.height\n        },\n        { x: selectorProps.x, y: selectorProps.y - selectorProps.height }\n      ];\n    }\n\n    // 3. 射线法判断点是否在多边形的内部\n    const ids = points.map(point => {\n      if (pointInPoly(point, poly) === \"in\") {\n        return point.id;\n      }\n    });\n    setSelectedNodes(ids);\n    setDragSelectable(false);\n  };\n\n  /** 保存 */\n  const handleSave = async () => {\n    const data = await handleSaveData();\n    if (data) {\n      alert(\"保存成功\");\n    } else {\n      alert(\"保存失败\");\n    }\n  };\n\n  useKeyPress(\n    \"delete\",\n    () => {\n      handleDelete();\n    },\n    {\n      events: [\"keydown\", \"keyup\"]\n    }\n  );\n\n  const isMac = navigator.platform.startsWith(\"Mac\");\n\n  useKeyPress(isMac ? [\"meta.x\"] : [\"ctrl.x\"], () => {\n    handleShear();\n  });\n\n  useKeyPress(isMac ? [\"meta.c\"] : [\"ctrl.c\"], () => {\n    handleCopy();\n  });\n\n  useKeyPress(isMac ? [\"meta.v\"] : [\"ctrl.v\"], () => {\n    handlePaste();\n  });\n\n  /** 操作区 */\n  const renderOperation = (\n    <div>\n      <Toolbar\n        ref={screenRef}\n        screenScale={screenScale}\n        changeScreenScale={changeScreenScale}\n        handleResizeTo={canvasInstance && canvasInstance.handleResizeTo}\n        items={[\n          \"save\",\n          \"fullscreen\",\n          \"zoom\",\n          \"adapt\",\n          \"format\",\n          \"ratio\",\n          \"shear\",\n          \"copy\",\n          \"paste\",\n          \"delete\",\n          \"dragSelect\"\n        ]}\n        layout={canvasInstance && canvasInstance.layout}\n        onCopy={handleCopy}\n        onPaste={handlePaste}\n        onDelete={handleDelete}\n        onShear={handleShear}\n        onDragSelect={handleDragSelect}\n        onSave={handleSave}\n      />\n    </div>\n  );\n  /** 渲染节点选择区 */\n  const renderNodePanel = (\n    <div className=\"editor-nodePanel\">\n      <NodePanel onDrag={setDragNode} />\n    </div>\n  );\n\n  /** 渲染中间画布区 */\n  const renderCanvas = (\n    <div className=\"editor-canvas\">\n      <DragSelector\n        visible={dragSelectable}\n        getPopupContainer={() => document.querySelector(\".editor-canvas\")}\n        overlayColor={\"rgba(0,0,0,0.1)\"}\n        selectorStyle={{\n          fill: \"transparent\",\n          strokeWidth: 1,\n          stroke: \"#6ca0f5\",\n          strokeDasharray: \"5 5\"\n        }}\n        onClose={onDragSelectorClose}\n      />\n      <CanvasContent\n        dragNode={dragNode}\n        ref={canvasRef}\n        nodes={nodes}\n        links={links}\n        setNodes={setNodes}\n        setLinks={setLinks}\n        selectedLinks={selectedLinks}\n        setSelectedLinks={setSelectedLinks}\n        selectedNodes={selectedNodes}\n        setSelectedNodes={setSelectedNodes}\n        updateNodes={updateNodes}\n        updateLinks={updateLinks}\n        deleteNodes={handleDeleteNodes}\n        deleteLinks={handleDeleteLinks}\n        copiedNodes={copiedNodes}\n        setCopiedNodes={setCopiedNodes}\n        currTrans={currTrans}\n        setCurrTrans={setCurrTrans}\n      />\n    </div>\n  );\n\n  /** 渲染配置区 */\n  const renderProperty = <div className=\"editor-property\"></div>;\n\n  return (\n    <div className=\"editor-demo\" ref={screenRef}>\n      <div className=\"editor-operation\">{renderOperation}</div>\n      <div className=\"editor-container\">\n        {renderNodePanel}\n        {renderCanvas}\n        {renderProperty}\n      </div>\n    </div>\n  );\n}\n","/**\n * @file 布局相关方法\n * @author perkinJ\n */\n\nexport class Point {\n  x: number;\n\n  y: number;\n}\n\nexport type Relation = 'on' | 'in' | 'out';\n\n/**\n * @description 射线法判断点是否在多边形内部\n * @param {Object} p 待判断的点，格式：{ x: X坐标, y: Y坐标 }\n * @param {Array} poly 多边形顶点，数组成员的格式同 p\n * @return {Relation} 点p在多边形的关系，分别为on,in,out\n */\n\nexport function pointInPoly(p: Point, poly: Point[]): Relation {\n  const px = p.x;\n  const py = p.y;\n  let flag = false;\n\n  for (let i = 0, l = poly.length, j = l - 1; i < l; j = i, i++) {\n    const sx = poly[i].x;\n    const sy = poly[i].y;\n    const tx = poly[j].x;\n    const ty = poly[j].y;\n\n    // 点与多边形顶点重合\n    if ((sx === px && sy === py) || (tx === px && ty === py)) {\n      return 'on';\n    }\n\n    // 判断线段两端点是否在射线两侧\n    if ((sy < py && ty >= py) || (sy >= py && ty < py)) {\n      // 线段上与射线 Y 坐标相同的点的 X 坐标\n      const x = sx + ((py - sy) * (tx - sx)) / (ty - sy);\n\n      // 点在多边形的边上\n      if (x === px) {\n        return 'on';\n      }\n\n      // 射线穿过多边形的边界\n      if (x > px) {\n        flag = !flag;\n      }\n    }\n  }\n\n  // 射线穿过多边形边界的次数为奇数时点在多边形内\n  return flag ? 'in' : 'out';\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n","import * as React from \"react\";\nimport Editor from \"./editor\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n"],"sourceRoot":""}